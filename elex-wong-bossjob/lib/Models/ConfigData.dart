///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class ConfigDataDataSettingsCreditLimitsJob {
/*
{
  "limit": 1,
  "per": "month"
} 
*/

  int? limit;
  String? per;

  ConfigDataDataSettingsCreditLimitsJob({
    this.limit,
    this.per,
  });
  ConfigDataDataSettingsCreditLimitsJob.fromJson(Map<String, dynamic> json) {
    limit = json["limit"]?.toInt();
    per = json["per"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["limit"] = limit;
    data["per"] = per;
    return data;
  }
}

class ConfigDataDataSettingsCreditLimitsChat {
/*
{
  "limit": 5,
  "per": "day"
} 
*/

  int? limit;
  String? per;

  ConfigDataDataSettingsCreditLimitsChat({
    this.limit,
    this.per,
  });
  ConfigDataDataSettingsCreditLimitsChat.fromJson(Map<String, dynamic> json) {
    limit = json["limit"]?.toInt();
    per = json["per"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["limit"] = limit;
    data["per"] = per;
    return data;
  }
}

class ConfigDataDataSettingsCreditLimits {
/*
{
  "chat": {
    "limit": 5,
    "per": "day"
  },
  "job": {
    "limit": 1,
    "per": "month"
  }
} 
*/

  ConfigDataDataSettingsCreditLimitsChat? chat;
  ConfigDataDataSettingsCreditLimitsJob? job;

  ConfigDataDataSettingsCreditLimits({
    this.chat,
    this.job,
  });
  ConfigDataDataSettingsCreditLimits.fromJson(Map<String, dynamic> json) {
    chat = (json["chat"] != null)
        ? ConfigDataDataSettingsCreditLimitsChat.fromJson(json["chat"])
        : null;
    job = (json["job"] != null)
        ? ConfigDataDataSettingsCreditLimitsJob.fromJson(json["job"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (chat != null) {
      data["chat"] = chat!.toJson();
    }
    if (job != null) {
      data["job"] = job!.toJson();
    }
    return data;
  }
}

class ConfigDataDataSettings {
/*
{
  "credit_limits": {
    "chat": {
      "limit": 5,
      "per": "day"
    },
    "job": {
      "limit": 1,
      "per": "month"
    }
  }
} 
*/

  ConfigDataDataSettingsCreditLimits? creditLimits;

  ConfigDataDataSettings({
    this.creditLimits,
  });
  ConfigDataDataSettings.fromJson(Map<String, dynamic> json) {
    creditLimits = (json["credit_limits"] != null)
        ? ConfigDataDataSettingsCreditLimits.fromJson(json["credit_limits"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (creditLimits != null) {
      data["credit_limits"] = creditLimits!.toJson();
    }
    return data;
  }
}

class ConfigDataDataFiltersCompanySizes {
/*
{
  "0_to_50": "0 - 50"
} 
*/

  String? the0To_50;

  ConfigDataDataFiltersCompanySizes({
    this.the0To_50,
  });
  ConfigDataDataFiltersCompanySizes.fromJson(Map<String, dynamic> json) {
    the0To_50 = json["0_to_50"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["0_to_50"] = the0To_50;
    return data;
  }
}

class ConfigDataDataFiltersSalaryRangeFilters {
/*
{
  "10K_to_30K": "10K - 30K"
} 
*/

  String? the10KTo_30K;

  ConfigDataDataFiltersSalaryRangeFilters({
    this.the10KTo_30K,
  });
  ConfigDataDataFiltersSalaryRangeFilters.fromJson(Map<String, dynamic> json) {
    the10KTo_30K = json["10K_to_30K"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["10K_to_30K"] = the10KTo_30K;
    return data;
  }
}

class ConfigDataDataFiltersEducations {
/*
{
  "diploma": "Diploma"
} 
*/

  String? diploma;

  ConfigDataDataFiltersEducations({
    this.diploma,
  });
  ConfigDataDataFiltersEducations.fromJson(Map<String, dynamic> json) {
    diploma = json["diploma"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["diploma"] = diploma;
    return data;
  }
}

class ConfigDataDataFiltersWorkXps {
/*
{
  "1_to_3_years": "1 - 3 years"
} 
*/

  String? the1To_3Years;

  ConfigDataDataFiltersWorkXps({
    this.the1To_3Years,
  });
  ConfigDataDataFiltersWorkXps.fromJson(Map<String, dynamic> json) {
    the1To_3Years = json["1_to_3_years"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["1_to_3_years"] = the1To_3Years;
    return data;
  }
}

class ConfigDataDataFilters {
/*
{
  "work_xps": [
    {
      "1_to_3_years": "1 - 3 years"
    }
  ],
  "educations": [
    {
      "diploma": "Diploma"
    }
  ],
  "salary_range_filters": [
    {
      "10K_to_30K": "10K - 30K"
    }
  ],
  "company_sizes": [
    {
      "0_to_50": "0 - 50"
    }
  ]
} 
*/

  List<ConfigDataDataFiltersWorkXps?>? workXps;
  List<ConfigDataDataFiltersEducations?>? educations;
  List<ConfigDataDataFiltersSalaryRangeFilters?>? salaryRangeFilters;
  List<ConfigDataDataFiltersCompanySizes?>? companySizes;

  ConfigDataDataFilters({
    this.workXps,
    this.educations,
    this.salaryRangeFilters,
    this.companySizes,
  });
  ConfigDataDataFilters.fromJson(Map<String, dynamic> json) {
    if (json["work_xps"] != null) {
      final v = json["work_xps"];
      final arr0 = <ConfigDataDataFiltersWorkXps>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataFiltersWorkXps.fromJson(v));
      });
      workXps = arr0;
    }
    if (json["educations"] != null) {
      final v = json["educations"];
      final arr0 = <ConfigDataDataFiltersEducations>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataFiltersEducations.fromJson(v));
      });
      educations = arr0;
    }
    if (json["salary_range_filters"] != null) {
      final v = json["salary_range_filters"];
      final arr0 = <ConfigDataDataFiltersSalaryRangeFilters>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataFiltersSalaryRangeFilters.fromJson(v));
      });
      salaryRangeFilters = arr0;
    }
    if (json["company_sizes"] != null) {
      final v = json["company_sizes"];
      final arr0 = <ConfigDataDataFiltersCompanySizes>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataFiltersCompanySizes.fromJson(v));
      });
      companySizes = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (workXps != null) {
      final v = workXps;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["work_xps"] = arr0;
    }
    if (educations != null) {
      final v = educations;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["educations"] = arr0;
    }
    if (salaryRangeFilters != null) {
      final v = salaryRangeFilters;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["salary_range_filters"] = arr0;
    }
    if (companySizes != null) {
      final v = companySizes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["company_sizes"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataStatusesChats {
/*
{
  "id": 1,
  "value": "New"
} 
*/

  int? id;
  String? value;

  ConfigDataDataStatusesChats({
    this.id,
    this.value,
  });
  ConfigDataDataStatusesChats.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataStatusesDialogues {
/*
{
  "id": 1,
  "value": "Active"
} 
*/

  int? id;
  String? value;

  ConfigDataDataStatusesDialogues({
    this.id,
    this.value,
  });
  ConfigDataDataStatusesDialogues.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataStatusesJobApplications {
/*
{
  "id": 1,
  "value": "New"
} 
*/

  int? id;
  String? value;

  ConfigDataDataStatusesJobApplications({
    this.id,
    this.value,
  });
  ConfigDataDataStatusesJobApplications.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataStatusesJobSeekerResumes {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesJobSeekerResumes({
    this.active,
  });
  ConfigDataDataStatusesJobSeekerResumes.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesBlacklistedCompanies {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesBlacklistedCompanies({
    this.active,
  });
  ConfigDataDataStatusesBlacklistedCompanies.fromJson(
      Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesBlacklistedUsers {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesBlacklistedUsers({
    this.active,
  });
  ConfigDataDataStatusesBlacklistedUsers.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesSavedCandidates {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesSavedCandidates({
    this.active,
  });
  ConfigDataDataStatusesSavedCandidates.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesSavedJobs {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesSavedJobs({
    this.active,
  });
  ConfigDataDataStatusesSavedJobs.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesJobSeekerEdus {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesJobSeekerEdus({
    this.active,
  });
  ConfigDataDataStatusesJobSeekerEdus.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesJobSeekerPrefs {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesJobSeekerPrefs({
    this.active,
  });
  ConfigDataDataStatusesJobSeekerPrefs.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesJobSeekerWorkXps {
/*
{
  "active": "Active"
} 
*/

  String? active;

  ConfigDataDataStatusesJobSeekerWorkXps({
    this.active,
  });
  ConfigDataDataStatusesJobSeekerWorkXps.fromJson(Map<String, dynamic> json) {
    active = json["active"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["active"] = active;
    return data;
  }
}

class ConfigDataDataStatusesRecruiterDocuments {
/*
{
  "pending": "Pending"
} 
*/

  String? pending;

  ConfigDataDataStatusesRecruiterDocuments({
    this.pending,
  });
  ConfigDataDataStatusesRecruiterDocuments.fromJson(Map<String, dynamic> json) {
    pending = json["pending"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["pending"] = pending;
    return data;
  }
}

class ConfigDataDataStatusesCompanyDocuments {
/*
{
  "pending": "Pending"
} 
*/

  String? pending;

  ConfigDataDataStatusesCompanyDocuments({
    this.pending,
  });
  ConfigDataDataStatusesCompanyDocuments.fromJson(Map<String, dynamic> json) {
    pending = json["pending"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["pending"] = pending;
    return data;
  }
}

class ConfigDataDataStatusesJobs {
/*
{
  "draft": "Draft"
} 
*/

  String? draft;

  ConfigDataDataStatusesJobs({
    this.draft,
  });
  ConfigDataDataStatusesJobs.fromJson(Map<String, dynamic> json) {
    draft = json["draft"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["draft"] = draft;
    return data;
  }
}

class ConfigDataDataStatusesUsers {
/*
{
  "pending": "Pending"
} 
*/

  String? pending;

  ConfigDataDataStatusesUsers({
    this.pending,
  });
  ConfigDataDataStatusesUsers.fromJson(Map<String, dynamic> json) {
    pending = json["pending"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["pending"] = pending;
    return data;
  }
}

class ConfigDataDataStatuses {
/*
{
  "users": [
    {
      "pending": "Pending"
    }
  ],
  "jobs": [
    {
      "draft": "Draft"
    }
  ],
  "company_documents": [
    {
      "pending": "Pending"
    }
  ],
  "recruiter_documents": [
    {
      "pending": "Pending"
    }
  ],
  "job_seeker_work_xps": [
    {
      "active": "Active"
    }
  ],
  "job_seeker_prefs": [
    {
      "active": "Active"
    }
  ],
  "job_seeker_edus": [
    {
      "active": "Active"
    }
  ],
  "saved_jobs": [
    {
      "active": "Active"
    }
  ],
  "saved_candidates": [
    {
      "active": "Active"
    }
  ],
  "blacklisted_users": [
    {
      "active": "Active"
    }
  ],
  "blacklisted_companies": [
    {
      "active": "Active"
    }
  ],
  "job_seeker_resumes": [
    {
      "active": "Active"
    }
  ],
  "job_applications": [
    {
      "id": 1,
      "value": "New"
    }
  ],
  "dialogues": [
    {
      "id": 1,
      "value": "Active"
    }
  ],
  "chats": [
    {
      "id": 1,
      "value": "New"
    }
  ]
} 
*/

  List<ConfigDataDataStatusesUsers?>? users;
  List<ConfigDataDataStatusesJobs?>? jobs;
  List<ConfigDataDataStatusesCompanyDocuments?>? companyDocuments;
  List<ConfigDataDataStatusesRecruiterDocuments?>? recruiterDocuments;
  List<ConfigDataDataStatusesJobSeekerWorkXps?>? jobSeekerWorkXps;
  List<ConfigDataDataStatusesJobSeekerPrefs?>? jobSeekerPrefs;
  List<ConfigDataDataStatusesJobSeekerEdus?>? jobSeekerEdus;
  List<ConfigDataDataStatusesSavedJobs?>? savedJobs;
  List<ConfigDataDataStatusesSavedCandidates?>? savedCandidates;
  List<ConfigDataDataStatusesBlacklistedUsers?>? blacklistedUsers;
  List<ConfigDataDataStatusesBlacklistedCompanies?>? blacklistedCompanies;
  List<ConfigDataDataStatusesJobSeekerResumes?>? jobSeekerResumes;
  List<ConfigDataDataStatusesJobApplications?>? jobApplications;
  List<ConfigDataDataStatusesDialogues?>? dialogues;
  List<ConfigDataDataStatusesChats?>? chats;

  ConfigDataDataStatuses({
    this.users,
    this.jobs,
    this.companyDocuments,
    this.recruiterDocuments,
    this.jobSeekerWorkXps,
    this.jobSeekerPrefs,
    this.jobSeekerEdus,
    this.savedJobs,
    this.savedCandidates,
    this.blacklistedUsers,
    this.blacklistedCompanies,
    this.jobSeekerResumes,
    this.jobApplications,
    this.dialogues,
    this.chats,
  });
  ConfigDataDataStatuses.fromJson(Map<String, dynamic> json) {
    if (json["users"] != null) {
      final v = json["users"];
      final arr0 = <ConfigDataDataStatusesUsers>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesUsers.fromJson(v));
      });
      users = arr0;
    }
    if (json["jobs"] != null) {
      final v = json["jobs"];
      final arr0 = <ConfigDataDataStatusesJobs>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobs.fromJson(v));
      });
      jobs = arr0;
    }
    if (json["company_documents"] != null) {
      final v = json["company_documents"];
      final arr0 = <ConfigDataDataStatusesCompanyDocuments>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesCompanyDocuments.fromJson(v));
      });
      companyDocuments = arr0;
    }
    if (json["recruiter_documents"] != null) {
      final v = json["recruiter_documents"];
      final arr0 = <ConfigDataDataStatusesRecruiterDocuments>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesRecruiterDocuments.fromJson(v));
      });
      recruiterDocuments = arr0;
    }
    if (json["job_seeker_work_xps"] != null) {
      final v = json["job_seeker_work_xps"];
      final arr0 = <ConfigDataDataStatusesJobSeekerWorkXps>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobSeekerWorkXps.fromJson(v));
      });
      jobSeekerWorkXps = arr0;
    }
    if (json["job_seeker_prefs"] != null) {
      final v = json["job_seeker_prefs"];
      final arr0 = <ConfigDataDataStatusesJobSeekerPrefs>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobSeekerPrefs.fromJson(v));
      });
      jobSeekerPrefs = arr0;
    }
    if (json["job_seeker_edus"] != null) {
      final v = json["job_seeker_edus"];
      final arr0 = <ConfigDataDataStatusesJobSeekerEdus>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobSeekerEdus.fromJson(v));
      });
      jobSeekerEdus = arr0;
    }
    if (json["saved_jobs"] != null) {
      final v = json["saved_jobs"];
      final arr0 = <ConfigDataDataStatusesSavedJobs>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesSavedJobs.fromJson(v));
      });
      savedJobs = arr0;
    }
    if (json["saved_candidates"] != null) {
      final v = json["saved_candidates"];
      final arr0 = <ConfigDataDataStatusesSavedCandidates>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesSavedCandidates.fromJson(v));
      });
      savedCandidates = arr0;
    }
    if (json["blacklisted_users"] != null) {
      final v = json["blacklisted_users"];
      final arr0 = <ConfigDataDataStatusesBlacklistedUsers>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesBlacklistedUsers.fromJson(v));
      });
      blacklistedUsers = arr0;
    }
    if (json["blacklisted_companies"] != null) {
      final v = json["blacklisted_companies"];
      final arr0 = <ConfigDataDataStatusesBlacklistedCompanies>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesBlacklistedCompanies.fromJson(v));
      });
      blacklistedCompanies = arr0;
    }
    if (json["job_seeker_resumes"] != null) {
      final v = json["job_seeker_resumes"];
      final arr0 = <ConfigDataDataStatusesJobSeekerResumes>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobSeekerResumes.fromJson(v));
      });
      jobSeekerResumes = arr0;
    }
    if (json["job_applications"] != null) {
      final v = json["job_applications"];
      final arr0 = <ConfigDataDataStatusesJobApplications>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesJobApplications.fromJson(v));
      });
      jobApplications = arr0;
    }
    if (json["dialogues"] != null) {
      final v = json["dialogues"];
      final arr0 = <ConfigDataDataStatusesDialogues>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesDialogues.fromJson(v));
      });
      dialogues = arr0;
    }
    if (json["chats"] != null) {
      final v = json["chats"];
      final arr0 = <ConfigDataDataStatusesChats>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataStatusesChats.fromJson(v));
      });
      chats = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (users != null) {
      final v = users;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["users"] = arr0;
    }
    if (jobs != null) {
      final v = jobs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["jobs"] = arr0;
    }
    if (companyDocuments != null) {
      final v = companyDocuments;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["company_documents"] = arr0;
    }
    if (recruiterDocuments != null) {
      final v = recruiterDocuments;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["recruiter_documents"] = arr0;
    }
    if (jobSeekerWorkXps != null) {
      final v = jobSeekerWorkXps;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_seeker_work_xps"] = arr0;
    }
    if (jobSeekerPrefs != null) {
      final v = jobSeekerPrefs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_seeker_prefs"] = arr0;
    }
    if (jobSeekerEdus != null) {
      final v = jobSeekerEdus;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_seeker_edus"] = arr0;
    }
    if (savedJobs != null) {
      final v = savedJobs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["saved_jobs"] = arr0;
    }
    if (savedCandidates != null) {
      final v = savedCandidates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["saved_candidates"] = arr0;
    }
    if (blacklistedUsers != null) {
      final v = blacklistedUsers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["blacklisted_users"] = arr0;
    }
    if (blacklistedCompanies != null) {
      final v = blacklistedCompanies;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["blacklisted_companies"] = arr0;
    }
    if (jobSeekerResumes != null) {
      final v = jobSeekerResumes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_seeker_resumes"] = arr0;
    }
    if (jobApplications != null) {
      final v = jobApplications;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_applications"] = arr0;
    }
    if (dialogues != null) {
      final v = dialogues;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["dialogues"] = arr0;
    }
    if (chats != null) {
      final v = chats;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["chats"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsJobPageRightSideBanners {
/*
{
  "alt": "Homebased Jobs",
  "image_url": "https://assets.bossjob.com/right-side-banners/None/image8a10b9e03549b4dba745bcf2022e1885.png",
  "mobile_image_url": "https://assets.bossjob.com/right-side-banners/None/mobile-image1b2dbd11715f1c87ed4ed04d9d2a0746.png",
  "cta_url": "https://bossjob.ph/dashboard/jobs/all/1?query=all&jobLocation=Homebased&utm_source=Bossjob&utm_medium=sidebanner&utm_campaign=homebased_jobs"
} 
*/

  String? alt;
  String? imageUrl;
  String? mobileImageUrl;
  String? ctaUrl;

  ConfigDataDataInputsJobPageRightSideBanners({
    this.alt,
    this.imageUrl,
    this.mobileImageUrl,
    this.ctaUrl,
  });
  ConfigDataDataInputsJobPageRightSideBanners.fromJson(
      Map<String, dynamic> json) {
    alt = json["alt"]?.toString();
    imageUrl = json["image_url"]?.toString();
    mobileImageUrl = json["mobile_image_url"]?.toString();
    ctaUrl = json["cta_url"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["alt"] = alt;
    data["image_url"] = imageUrl;
    data["mobile_image_url"] = mobileImageUrl;
    data["cta_url"] = ctaUrl;
    return data;
  }
}

class ConfigDataDataInputsHomepageFeatureBanners {
/*
{
  "logo_url": null,
  "cover_pic_url": "https://assets.bossjob.com/feature-banners/1/cover-pic/92ea69daa50d0b74eed578d66f74af5d.png",
  "tablet_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/tablet-cover-pic/72c3262a5b1733cd2114bcd9de39044e.png",
  "mobile_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/mobile-cover-pic/ddc2f7d82f297b40217bf6a757957a60.png",
  "title": "Jobs for Professionals.",
  "description": "Get your dream job today",
  "description_color": "#ffffff",
  "color_code": "#ffffff",
  "button_color": "#ffffff",
  "cta_text": "View jobs",
  "cta_text_color": "#003649",
  "cta_url": "https://bossjob.ph/jobs-hiring/",
  "sort_order": 1
} 
*/

  String? logoUrl;
  String? coverPicUrl;
  String? tabletCoverPicUrl;
  String? mobileCoverPicUrl;
  String? title;
  String? description;
  String? descriptionColor;
  String? colorCode;
  String? buttonColor;
  String? ctaText;
  String? ctaTextColor;
  String? ctaUrl;
  int? sortOrder;

  ConfigDataDataInputsHomepageFeatureBanners({
    this.logoUrl,
    this.coverPicUrl,
    this.tabletCoverPicUrl,
    this.mobileCoverPicUrl,
    this.title,
    this.description,
    this.descriptionColor,
    this.colorCode,
    this.buttonColor,
    this.ctaText,
    this.ctaTextColor,
    this.ctaUrl,
    this.sortOrder,
  });
  ConfigDataDataInputsHomepageFeatureBanners.fromJson(
      Map<String, dynamic> json) {
    logoUrl = json["logo_url"]?.toString();
    coverPicUrl = json["cover_pic_url"]?.toString();
    tabletCoverPicUrl = json["tablet_cover_pic_url"]?.toString();
    mobileCoverPicUrl = json["mobile_cover_pic_url"]?.toString();
    title = json["title"]?.toString();
    description = json["description"]?.toString();
    descriptionColor = json["description_color"]?.toString();
    colorCode = json["color_code"]?.toString();
    buttonColor = json["button_color"]?.toString();
    ctaText = json["cta_text"]?.toString();
    ctaTextColor = json["cta_text_color"]?.toString();
    ctaUrl = json["cta_url"]?.toString();
    sortOrder = json["sort_order"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["logo_url"] = logoUrl;
    data["cover_pic_url"] = coverPicUrl;
    data["tablet_cover_pic_url"] = tabletCoverPicUrl;
    data["mobile_cover_pic_url"] = mobileCoverPicUrl;
    data["title"] = title;
    data["description"] = description;
    data["description_color"] = descriptionColor;
    data["color_code"] = colorCode;
    data["button_color"] = buttonColor;
    data["cta_text"] = ctaText;
    data["cta_text_color"] = ctaTextColor;
    data["cta_url"] = ctaUrl;
    data["sort_order"] = sortOrder;
    return data;
  }
}

class ConfigDataDataInputsProductFeatureBanners {
/*
{
  "title": "Robo-Headhunting",
  "sub_title": null,
  "description": "Let us provide you with suitable candidates who are interested in your jobs.",
  "cta_text": "Learn More",
  "cta_url": "https://blog.bossjob.ph/hiring-tips/1458/its-a-match-let-bossjobs-robo-headhunting-service-find-the-best-jobs-for-you-24-7/",
  "sort_order": 1
} 
*/

  String? title;
  String? subTitle;
  String? description;
  String? ctaText;
  String? ctaUrl;
  int? sortOrder;

  ConfigDataDataInputsProductFeatureBanners({
    this.title,
    this.subTitle,
    this.description,
    this.ctaText,
    this.ctaUrl,
    this.sortOrder,
  });
  ConfigDataDataInputsProductFeatureBanners.fromJson(
      Map<String, dynamic> json) {
    title = json["title"]?.toString();
    subTitle = json["sub_title"]?.toString();
    description = json["description"]?.toString();
    ctaText = json["cta_text"]?.toString();
    ctaUrl = json["cta_url"]?.toString();
    sortOrder = json["sort_order"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["title"] = title;
    data["sub_title"] = subTitle;
    data["description"] = description;
    data["cta_text"] = ctaText;
    data["cta_url"] = ctaUrl;
    data["sort_order"] = sortOrder;
    return data;
  }
}

class ConfigDataDataInputsPaymentPackagesCreditsAddOns {
/*
{
  "label": "3,450 Free Bosspoints",
  "free_boss_point": 3450,
  "included": true,
  "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
} 
*/

  String? label;
  int? freeBossPoint;
  bool? included;
  String? toolTipText;

  ConfigDataDataInputsPaymentPackagesCreditsAddOns({
    this.label,
    this.freeBossPoint,
    this.included,
    this.toolTipText,
  });
  ConfigDataDataInputsPaymentPackagesCreditsAddOns.fromJson(
      Map<String, dynamic> json) {
    label = json["label"]?.toString();
    freeBossPoint = json["free_boss_point"]?.toInt();
    included = json["included"];
    toolTipText = json["tool_tip_text"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    data["free_boss_point"] = freeBossPoint;
    data["included"] = included;
    data["tool_tip_text"] = toolTipText;
    return data;
  }
}

class ConfigDataDataInputsPaymentPackagesCredits {
/*
{
  "payment_key": "20_credits",
  "payment_category": "credit",
  "credit": 20,
  "boss_point": 3450,
  "actual_amount": 6900,
  "amount": 3450,
  "popular": false,
  "add_ons": [
    {
      "label": "3,450 Free Bosspoints",
      "free_boss_point": 3450,
      "included": true,
      "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
    }
  ]
} 
*/

  String? paymentKey;
  String? paymentCategory;
  int? credit;
  int? bossPoint;
  int? actualAmount;
  int? amount;
  bool? popular;
  List<ConfigDataDataInputsPaymentPackagesCreditsAddOns?>? addOns;

  ConfigDataDataInputsPaymentPackagesCredits({
    this.paymentKey,
    this.paymentCategory,
    this.credit,
    this.bossPoint,
    this.actualAmount,
    this.amount,
    this.popular,
    this.addOns,
  });
  ConfigDataDataInputsPaymentPackagesCredits.fromJson(
      Map<String, dynamic> json) {
    paymentKey = json["payment_key"]?.toString();
    paymentCategory = json["payment_category"]?.toString();
    credit = json["credit"]?.toInt();
    bossPoint = json["boss_point"]?.toInt();
    actualAmount = json["actual_amount"]?.toInt();
    amount = json["amount"]?.toInt();
    popular = json["popular"];
    if (json["add_ons"] != null) {
      final v = json["add_ons"];
      final arr0 = <ConfigDataDataInputsPaymentPackagesCreditsAddOns>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsPaymentPackagesCreditsAddOns.fromJson(v));
      });
      addOns = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["payment_key"] = paymentKey;
    data["payment_category"] = paymentCategory;
    data["credit"] = credit;
    data["boss_point"] = bossPoint;
    data["actual_amount"] = actualAmount;
    data["amount"] = amount;
    data["popular"] = popular;
    if (addOns != null) {
      final v = addOns;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["add_ons"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsPaymentPackagesJobsAddOns {
/*
{
  "label": "90 days exposure",
  "exposure_days": 90,
  "included": true
} 
*/

  String? label;
  int? exposureDays;
  bool? included;

  ConfigDataDataInputsPaymentPackagesJobsAddOns({
    this.label,
    this.exposureDays,
    this.included,
  });
  ConfigDataDataInputsPaymentPackagesJobsAddOns.fromJson(
      Map<String, dynamic> json) {
    label = json["label"]?.toString();
    exposureDays = json["exposure_days"]?.toInt();
    included = json["included"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["label"] = label;
    data["exposure_days"] = exposureDays;
    data["included"] = included;
    return data;
  }
}

class ConfigDataDataInputsPaymentPackagesJobs {
/*
{
  "payment_key": "1_job_posts",
  "payment_category": "job",
  "job_post": 1,
  "credit": 20,
  "boss_point": 2300,
  "actual_amount": 4600,
  "amount": 2300,
  "popular": false,
  "add_ons": [
    {
      "label": "90 days exposure",
      "exposure_days": 90,
      "included": true
    }
  ]
} 
*/

  String? paymentKey;
  String? paymentCategory;
  int? jobPost;
  int? credit;
  int? bossPoint;
  int? actualAmount;
  int? amount;
  bool? popular;
  List<ConfigDataDataInputsPaymentPackagesJobsAddOns?>? addOns;

  ConfigDataDataInputsPaymentPackagesJobs({
    this.paymentKey,
    this.paymentCategory,
    this.jobPost,
    this.credit,
    this.bossPoint,
    this.actualAmount,
    this.amount,
    this.popular,
    this.addOns,
  });
  ConfigDataDataInputsPaymentPackagesJobs.fromJson(Map<String, dynamic> json) {
    paymentKey = json["payment_key"]?.toString();
    paymentCategory = json["payment_category"]?.toString();
    jobPost = json["job_post"]?.toInt();
    credit = json["credit"]?.toInt();
    bossPoint = json["boss_point"]?.toInt();
    actualAmount = json["actual_amount"]?.toInt();
    amount = json["amount"]?.toInt();
    popular = json["popular"];
    if (json["add_ons"] != null) {
      final v = json["add_ons"];
      final arr0 = <ConfigDataDataInputsPaymentPackagesJobsAddOns>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsPaymentPackagesJobsAddOns.fromJson(v));
      });
      addOns = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["payment_key"] = paymentKey;
    data["payment_category"] = paymentCategory;
    data["job_post"] = jobPost;
    data["credit"] = credit;
    data["boss_point"] = bossPoint;
    data["actual_amount"] = actualAmount;
    data["amount"] = amount;
    data["popular"] = popular;
    if (addOns != null) {
      final v = addOns;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["add_ons"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsPaymentPackagesSubscriptions {
/*
{
  "name": "Free",
  "monthly_fee": 0,
  "annual_fee": 0,
  "monthly_job_credit": 0,
  "monthly_feature_job_credit": 0,
  "monthly_urgent_job_credit": 0,
  "monthly_unlock_talent_credit": 0,
  "max_no_of_screening_questions_per_job": 0,
  "max_no_of_emails_to_receive_resume_per_job": 0,
  "category": "free",
  "partner_network": true,
  "feature_job": false,
  "urgent_job": false,
  "auto_generate_job_description": false,
  "screening_question": false,
  "job_mirroring": false,
  "redirect_external_url": false,
  "job_salary_masking": false,
  "view_application_on_website": true,
  "applicant_status_tracking": true,
  "receive_resume_in_email": false,
  "advance_resume_scoring": false,
  "export_application_in_excel": false,
  "live_chat_with_applicant": true,
  "branded_employer_career_page": true,
  "top_employer_logo": false,
  "basic_statistic_job_view_and_application": false,
  "export_job_statistic_in_excel": false,
  "phone_chat_email_support": true,
  "dedicated_account_manager": false,
  "robo_headhunting": false,
  "resume_request": false,
  "payment_key": "free",
  "payment_category": "subscription"
} 
*/

  String? name;
  int? monthlyFee;
  int? annualFee;
  int? monthlyJobCredit;
  int? monthlyFeatureJobCredit;
  int? monthlyUrgentJobCredit;
  int? monthlyUnlockTalentCredit;
  int? maxNoOfScreeningQuestionsPerJob;
  int? maxNoOfEmailsToReceiveResumePerJob;
  String? category;
  bool? partnerNetwork;
  bool? featureJob;
  bool? urgentJob;
  bool? autoGenerateJobDescription;
  bool? screeningQuestion;
  bool? jobMirroring;
  bool? redirectExternalUrl;
  bool? jobSalaryMasking;
  bool? viewApplicationOnWebsite;
  bool? applicantStatusTracking;
  bool? receiveResumeInEmail;
  bool? advanceResumeScoring;
  bool? exportApplicationInExcel;
  bool? liveChatWithApplicant;
  bool? brandedEmployerCareerPage;
  bool? topEmployerLogo;
  bool? basicStatisticJobViewAndApplication;
  bool? exportJobStatisticInExcel;
  bool? phoneChatEmailSupport;
  bool? dedicatedAccountManager;
  bool? roboHeadhunting;
  bool? resumeRequest;
  String? paymentKey;
  String? paymentCategory;

  ConfigDataDataInputsPaymentPackagesSubscriptions({
    this.name,
    this.monthlyFee,
    this.annualFee,
    this.monthlyJobCredit,
    this.monthlyFeatureJobCredit,
    this.monthlyUrgentJobCredit,
    this.monthlyUnlockTalentCredit,
    this.maxNoOfScreeningQuestionsPerJob,
    this.maxNoOfEmailsToReceiveResumePerJob,
    this.category,
    this.partnerNetwork,
    this.featureJob,
    this.urgentJob,
    this.autoGenerateJobDescription,
    this.screeningQuestion,
    this.jobMirroring,
    this.redirectExternalUrl,
    this.jobSalaryMasking,
    this.viewApplicationOnWebsite,
    this.applicantStatusTracking,
    this.receiveResumeInEmail,
    this.advanceResumeScoring,
    this.exportApplicationInExcel,
    this.liveChatWithApplicant,
    this.brandedEmployerCareerPage,
    this.topEmployerLogo,
    this.basicStatisticJobViewAndApplication,
    this.exportJobStatisticInExcel,
    this.phoneChatEmailSupport,
    this.dedicatedAccountManager,
    this.roboHeadhunting,
    this.resumeRequest,
    this.paymentKey,
    this.paymentCategory,
  });
  ConfigDataDataInputsPaymentPackagesSubscriptions.fromJson(
      Map<String, dynamic> json) {
    name = json["name"]?.toString();
    monthlyFee = json["monthly_fee"]?.toInt();
    annualFee = json["annual_fee"]?.toInt();
    monthlyJobCredit = json["monthly_job_credit"]?.toInt();
    monthlyFeatureJobCredit = json["monthly_feature_job_credit"]?.toInt();
    monthlyUrgentJobCredit = json["monthly_urgent_job_credit"]?.toInt();
    monthlyUnlockTalentCredit = json["monthly_unlock_talent_credit"]?.toInt();
    maxNoOfScreeningQuestionsPerJob =
        json["max_no_of_screening_questions_per_job"]?.toInt();
    maxNoOfEmailsToReceiveResumePerJob =
        json["max_no_of_emails_to_receive_resume_per_job"]?.toInt();
    category = json["category"]?.toString();
    partnerNetwork = json["partner_network"];
    featureJob = json["feature_job"];
    urgentJob = json["urgent_job"];
    autoGenerateJobDescription = json["auto_generate_job_description"];
    screeningQuestion = json["screening_question"];
    jobMirroring = json["job_mirroring"];
    redirectExternalUrl = json["redirect_external_url"];
    jobSalaryMasking = json["job_salary_masking"];
    viewApplicationOnWebsite = json["view_application_on_website"];
    applicantStatusTracking = json["applicant_status_tracking"];
    receiveResumeInEmail = json["receive_resume_in_email"];
    advanceResumeScoring = json["advance_resume_scoring"];
    exportApplicationInExcel = json["export_application_in_excel"];
    liveChatWithApplicant = json["live_chat_with_applicant"];
    brandedEmployerCareerPage = json["branded_employer_career_page"];
    topEmployerLogo = json["top_employer_logo"];
    basicStatisticJobViewAndApplication =
        json["basic_statistic_job_view_and_application"];
    exportJobStatisticInExcel = json["export_job_statistic_in_excel"];
    phoneChatEmailSupport = json["phone_chat_email_support"];
    dedicatedAccountManager = json["dedicated_account_manager"];
    roboHeadhunting = json["robo_headhunting"];
    resumeRequest = json["resume_request"];
    paymentKey = json["payment_key"]?.toString();
    paymentCategory = json["payment_category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["monthly_fee"] = monthlyFee;
    data["annual_fee"] = annualFee;
    data["monthly_job_credit"] = monthlyJobCredit;
    data["monthly_feature_job_credit"] = monthlyFeatureJobCredit;
    data["monthly_urgent_job_credit"] = monthlyUrgentJobCredit;
    data["monthly_unlock_talent_credit"] = monthlyUnlockTalentCredit;
    data["max_no_of_screening_questions_per_job"] =
        maxNoOfScreeningQuestionsPerJob;
    data["max_no_of_emails_to_receive_resume_per_job"] =
        maxNoOfEmailsToReceiveResumePerJob;
    data["category"] = category;
    data["partner_network"] = partnerNetwork;
    data["feature_job"] = featureJob;
    data["urgent_job"] = urgentJob;
    data["auto_generate_job_description"] = autoGenerateJobDescription;
    data["screening_question"] = screeningQuestion;
    data["job_mirroring"] = jobMirroring;
    data["redirect_external_url"] = redirectExternalUrl;
    data["job_salary_masking"] = jobSalaryMasking;
    data["view_application_on_website"] = viewApplicationOnWebsite;
    data["applicant_status_tracking"] = applicantStatusTracking;
    data["receive_resume_in_email"] = receiveResumeInEmail;
    data["advance_resume_scoring"] = advanceResumeScoring;
    data["export_application_in_excel"] = exportApplicationInExcel;
    data["live_chat_with_applicant"] = liveChatWithApplicant;
    data["branded_employer_career_page"] = brandedEmployerCareerPage;
    data["top_employer_logo"] = topEmployerLogo;
    data["basic_statistic_job_view_and_application"] =
        basicStatisticJobViewAndApplication;
    data["export_job_statistic_in_excel"] = exportJobStatisticInExcel;
    data["phone_chat_email_support"] = phoneChatEmailSupport;
    data["dedicated_account_manager"] = dedicatedAccountManager;
    data["robo_headhunting"] = roboHeadhunting;
    data["resume_request"] = resumeRequest;
    data["payment_key"] = paymentKey;
    data["payment_category"] = paymentCategory;
    return data;
  }
}

class ConfigDataDataInputsPaymentPackages {
/*
{
  "subscriptions": [
    {
      "name": "Free",
      "monthly_fee": 0,
      "annual_fee": 0,
      "monthly_job_credit": 0,
      "monthly_feature_job_credit": 0,
      "monthly_urgent_job_credit": 0,
      "monthly_unlock_talent_credit": 0,
      "max_no_of_screening_questions_per_job": 0,
      "max_no_of_emails_to_receive_resume_per_job": 0,
      "category": "free",
      "partner_network": true,
      "feature_job": false,
      "urgent_job": false,
      "auto_generate_job_description": false,
      "screening_question": false,
      "job_mirroring": false,
      "redirect_external_url": false,
      "job_salary_masking": false,
      "view_application_on_website": true,
      "applicant_status_tracking": true,
      "receive_resume_in_email": false,
      "advance_resume_scoring": false,
      "export_application_in_excel": false,
      "live_chat_with_applicant": true,
      "branded_employer_career_page": true,
      "top_employer_logo": false,
      "basic_statistic_job_view_and_application": false,
      "export_job_statistic_in_excel": false,
      "phone_chat_email_support": true,
      "dedicated_account_manager": false,
      "robo_headhunting": false,
      "resume_request": false,
      "payment_key": "free",
      "payment_category": "subscription"
    }
  ],
  "jobs": [
    {
      "payment_key": "1_job_posts",
      "payment_category": "job",
      "job_post": 1,
      "credit": 20,
      "boss_point": 2300,
      "actual_amount": 4600,
      "amount": 2300,
      "popular": false,
      "add_ons": [
        {
          "label": "90 days exposure",
          "exposure_days": 90,
          "included": true
        }
      ]
    }
  ],
  "credits": [
    {
      "payment_key": "20_credits",
      "payment_category": "credit",
      "credit": 20,
      "boss_point": 3450,
      "actual_amount": 6900,
      "amount": 3450,
      "popular": false,
      "add_ons": [
        {
          "label": "3,450 Free Bosspoints",
          "free_boss_point": 3450,
          "included": true,
          "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
        }
      ]
    }
  ]
} 
*/

  List<ConfigDataDataInputsPaymentPackagesSubscriptions?>? subscriptions;
  List<ConfigDataDataInputsPaymentPackagesJobs?>? jobs;
  List<ConfigDataDataInputsPaymentPackagesCredits?>? credits;

  ConfigDataDataInputsPaymentPackages({
    this.subscriptions,
    this.jobs,
    this.credits,
  });
  ConfigDataDataInputsPaymentPackages.fromJson(Map<String, dynamic> json) {
    if (json["subscriptions"] != null) {
      final v = json["subscriptions"];
      final arr0 = <ConfigDataDataInputsPaymentPackagesSubscriptions>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsPaymentPackagesSubscriptions.fromJson(v));
      });
      subscriptions = arr0;
    }
    if (json["jobs"] != null) {
      final v = json["jobs"];
      final arr0 = <ConfigDataDataInputsPaymentPackagesJobs>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsPaymentPackagesJobs.fromJson(v));
      });
      jobs = arr0;
    }
    if (json["credits"] != null) {
      final v = json["credits"];
      final arr0 = <ConfigDataDataInputsPaymentPackagesCredits>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsPaymentPackagesCredits.fromJson(v));
      });
      credits = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (subscriptions != null) {
      final v = subscriptions;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["subscriptions"] = arr0;
    }
    if (jobs != null) {
      final v = jobs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["jobs"] = arr0;
    }
    if (credits != null) {
      final v = credits;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["credits"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsSubscibeJobFrequencyLists {
/*
{
  "id": 1,
  "value": "Daily"
} 
*/

  int? id;
  String? value;

  ConfigDataDataInputsSubscibeJobFrequencyLists({
    this.id,
    this.value,
  });
  ConfigDataDataInputsSubscibeJobFrequencyLists.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataInputsNoticePeriodLists {
/*
{
  "id": 1,
  "value": "Immediate"
} 
*/

  int? id;
  String? value;

  ConfigDataDataInputsNoticePeriodLists({
    this.id,
    this.value,
  });
  ConfigDataDataInputsNoticePeriodLists.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataInputsChatReportLists {
/*
{
  "id": 1,
  "value": "This person contains false information."
} 
*/

  int? id;
  String? value;

  ConfigDataDataInputsChatReportLists({
    this.id,
    this.value,
  });
  ConfigDataDataInputsChatReportLists.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class GameBetModelDataInputsSmsCountryLists {
/*
{
  "key": "af",
  "value": "Afghanistan",
  "code": "+93"
} 
*/

  String? key;
  String? value;
  String? code;

  GameBetModelDataInputsSmsCountryLists({
    this.key,
    this.value,
    this.code,
  });
  GameBetModelDataInputsSmsCountryLists.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    value = json['value']?.toString();
    code = json['code']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['value'] = value;
    data['code'] = code;
    return data;
  }
}

class ConfigDataDataInputsLocationListsLocations {
/*
{
  "key": "bgc",
  "value": "Bonifacio Global City",
  "is_popular": false,
  "region": "National Capital Region"
} 
*/

  String? key;
  String? value;
  bool? isPopular;
  String? region;

  ConfigDataDataInputsLocationListsLocations({
    this.key,
    this.value,
    this.isPopular,
    this.region,
  });
  ConfigDataDataInputsLocationListsLocations.fromJson(
      Map<String, dynamic> json) {
    key = json["key"]?.toString();
    value = json["value"]?.toString();
    isPopular = json["is_popular"];
    region = json["region"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["key"] = key;
    data["value"] = value;
    data["is_popular"] = isPopular;
    data["region"] = region;
    return data;
  }
}

class ConfigDataDataInputsLocationLists {
/*
{
  "key": "ncr",
  "value": "NCR",
  "display_name": "National Capital Region",
  "priority_order": 1,
  "locations": [
    {
      "key": "bgc",
      "value": "Bonifacio Global City",
      "is_popular": false,
      "region": "National Capital Region"
    }
  ]
} 
*/

  String? key;
  String? value;
  String? displayName;
  int? priorityOrder;
  List<ConfigDataDataInputsLocationListsLocations?>? locations;

  ConfigDataDataInputsLocationLists({
    this.key,
    this.value,
    this.displayName,
    this.priorityOrder,
    this.locations,
  });
  ConfigDataDataInputsLocationLists.fromJson(Map<String, dynamic> json) {
    key = json["key"]?.toString();
    value = json["value"]?.toString();
    displayName = json["display_name"]?.toString();
    priorityOrder = json["priority_order"]?.toInt();
    if (json["locations"] != null) {
      final v = json["locations"];
      final arr0 = <ConfigDataDataInputsLocationListsLocations>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsLocationListsLocations.fromJson(v));
      });
      locations = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["key"] = key;
    data["value"] = value;
    data["display_name"] = displayName;
    data["priority_order"] = priorityOrder;
    if (locations != null) {
      final v = locations;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["locations"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsSocialTypes {
/*
{
  "behance": "Behance",
  "url": "https://www.behance.net/"
} 
*/

  String? behance;
  String? url;

  ConfigDataDataInputsSocialTypes({
    this.behance,
    this.url,
  });
  ConfigDataDataInputsSocialTypes.fromJson(Map<String, dynamic> json) {
    behance = json["behance"]?.toString();
    url = json["url"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["behance"] = behance;
    data["url"] = url;
    return data;
  }
}

class ConfigDataDataInputsCountryLists {
/*
{
  "af": "Afghanistan"
} 
*/

  String? af;

  ConfigDataDataInputsCountryLists({
    this.af,
  });
  ConfigDataDataInputsCountryLists.fromJson(Map<String, dynamic> json) {
    af = json["af"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["af"] = af;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureListsStrategy {
/*
{
  "id": 25,
  "value": "Data-Driven",
  "category": "strategy"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyCultureListsStrategy({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyCultureListsStrategy.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureListsPersonalHealth {
/*
{
  "id": 20,
  "value": "Work/Life Balance",
  "category": "personal_health"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyCultureListsPersonalHealth({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyCultureListsPersonalHealth.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureListsCareerGrowth {
/*
{
  "id": 15,
  "value": "Internal Mobility",
  "category": "career_growth"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyCultureListsCareerGrowth({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyCultureListsCareerGrowth.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureListsDailyRoutines {
/*
{
  "id": 8,
  "value": "English Speaking",
  "category": "daily_routines"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyCultureListsDailyRoutines({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyCultureListsDailyRoutines.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureListsTeamCollaboration {
/*
{
  "id": 1,
  "value": "Diverse Team",
  "category": "team_collaboration"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyCultureListsTeamCollaboration({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyCultureListsTeamCollaboration.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyCultureLists {
/*
{
  "team_collaboration": [
    {
      "id": 1,
      "value": "Diverse Team",
      "category": "team_collaboration"
    }
  ],
  "daily_routines": [
    {
      "id": 8,
      "value": "English Speaking",
      "category": "daily_routines"
    }
  ],
  "career_growth": [
    {
      "id": 15,
      "value": "Internal Mobility",
      "category": "career_growth"
    }
  ],
  "personal_health": [
    {
      "id": 20,
      "value": "Work/Life Balance",
      "category": "personal_health"
    }
  ],
  "strategy": [
    {
      "id": 25,
      "value": "Data-Driven",
      "category": "strategy"
    }
  ]
} 
*/

  List<ConfigDataDataInputsCompanyCultureListsTeamCollaboration?>?
      teamCollaboration;
  List<ConfigDataDataInputsCompanyCultureListsDailyRoutines?>? dailyRoutines;
  List<ConfigDataDataInputsCompanyCultureListsCareerGrowth?>? careerGrowth;
  List<ConfigDataDataInputsCompanyCultureListsPersonalHealth?>? personalHealth;
  List<ConfigDataDataInputsCompanyCultureListsStrategy?>? strategy;

  ConfigDataDataInputsCompanyCultureLists({
    this.teamCollaboration,
    this.dailyRoutines,
    this.careerGrowth,
    this.personalHealth,
    this.strategy,
  });
  ConfigDataDataInputsCompanyCultureLists.fromJson(Map<String, dynamic> json) {
    if (json["team_collaboration"] != null) {
      final v = json["team_collaboration"];
      final arr0 = <ConfigDataDataInputsCompanyCultureListsTeamCollaboration>[];
      v.forEach((v) {
        arr0.add(
            ConfigDataDataInputsCompanyCultureListsTeamCollaboration.fromJson(
                v));
      });
      teamCollaboration = arr0;
    }
    if (json["daily_routines"] != null) {
      final v = json["daily_routines"];
      final arr0 = <ConfigDataDataInputsCompanyCultureListsDailyRoutines>[];
      v.forEach((v) {
        arr0.add(
            ConfigDataDataInputsCompanyCultureListsDailyRoutines.fromJson(v));
      });
      dailyRoutines = arr0;
    }
    if (json["career_growth"] != null) {
      final v = json["career_growth"];
      final arr0 = <ConfigDataDataInputsCompanyCultureListsCareerGrowth>[];
      v.forEach((v) {
        arr0.add(
            ConfigDataDataInputsCompanyCultureListsCareerGrowth.fromJson(v));
      });
      careerGrowth = arr0;
    }
    if (json["personal_health"] != null) {
      final v = json["personal_health"];
      final arr0 = <ConfigDataDataInputsCompanyCultureListsPersonalHealth>[];
      v.forEach((v) {
        arr0.add(
            ConfigDataDataInputsCompanyCultureListsPersonalHealth.fromJson(v));
      });
      personalHealth = arr0;
    }
    if (json["strategy"] != null) {
      final v = json["strategy"];
      final arr0 = <ConfigDataDataInputsCompanyCultureListsStrategy>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsCompanyCultureListsStrategy.fromJson(v));
      });
      strategy = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (teamCollaboration != null) {
      final v = teamCollaboration;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["team_collaboration"] = arr0;
    }
    if (dailyRoutines != null) {
      final v = dailyRoutines;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["daily_routines"] = arr0;
    }
    if (careerGrowth != null) {
      final v = careerGrowth;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["career_growth"] = arr0;
    }
    if (personalHealth != null) {
      final v = personalHealth;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["personal_health"] = arr0;
    }
    if (strategy != null) {
      final v = strategy;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["strategy"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsCompanyBenefitListsLeave {
/*
{
  "id": 18,
  "value": "Work From Home",
  "category": "leave"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyBenefitListsLeave({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyBenefitListsLeave.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyBenefitListsPerksBenefits {
/*
{
  "id": 8,
  "value": "Free Meals",
  "category": "perks_benefits"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyBenefitListsPerksBenefits({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyBenefitListsPerksBenefits.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness {
/*
{
  "id": 1,
  "value": "Life Insurance",
  "category": "insurance_health_wellness"
} 
*/

  int? id;
  String? value;
  String? category;

  ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness({
    this.id,
    this.value,
    this.category,
  });
  ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
    category = json["category"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    data["category"] = category;
    return data;
  }
}

class ConfigDataDataInputsCompanyBenefitLists {
/*
{
  "insurance_health_wellness": [
    {
      "id": 1,
      "value": "Life Insurance",
      "category": "insurance_health_wellness"
    }
  ],
  "perks_benefits": [
    {
      "id": 8,
      "value": "Free Meals",
      "category": "perks_benefits"
    }
  ],
  "leave": [
    {
      "id": 18,
      "value": "Work From Home",
      "category": "leave"
    }
  ]
} 
*/

  List<ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness?>?
      insuranceHealthWellness;
  List<ConfigDataDataInputsCompanyBenefitListsPerksBenefits?>? perksBenefits;
  List<ConfigDataDataInputsCompanyBenefitListsLeave?>? leave;

  ConfigDataDataInputsCompanyBenefitLists({
    this.insuranceHealthWellness,
    this.perksBenefits,
    this.leave,
  });
  ConfigDataDataInputsCompanyBenefitLists.fromJson(Map<String, dynamic> json) {
    if (json["insurance_health_wellness"] != null) {
      final v = json["insurance_health_wellness"];
      final arr0 =
          <ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsCompanyBenefitListsInsuranceHealthWellness
            .fromJson(v));
      });
      insuranceHealthWellness = arr0;
    }
    if (json["perks_benefits"] != null) {
      final v = json["perks_benefits"];
      final arr0 = <ConfigDataDataInputsCompanyBenefitListsPerksBenefits>[];
      v.forEach((v) {
        arr0.add(
            ConfigDataDataInputsCompanyBenefitListsPerksBenefits.fromJson(v));
      });
      perksBenefits = arr0;
    }
    if (json["leave"] != null) {
      final v = json["leave"];
      final arr0 = <ConfigDataDataInputsCompanyBenefitListsLeave>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsCompanyBenefitListsLeave.fromJson(v));
      });
      leave = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (insuranceHealthWellness != null) {
      final v = insuranceHealthWellness;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["insurance_health_wellness"] = arr0;
    }
    if (perksBenefits != null) {
      final v = perksBenefits;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["perks_benefits"] = arr0;
    }
    if (leave != null) {
      final v = leave;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["leave"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsJobAttractiveReasons {
/*
{
  "id": 1,
  "value": "Stable Company"
} 
*/

  int? id;
  String? value;

  ConfigDataDataInputsJobAttractiveReasons({
    this.id,
    this.value,
  });
  ConfigDataDataInputsJobAttractiveReasons.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataInputsJobBenefitListsAllowance {
/*
{
  "id": 5,
  "name": "Telecommunication Allowance"
} 
*/

  int? id;
  String? name;

  ConfigDataDataInputsJobBenefitListsAllowance({
    this.id,
    this.name,
  });
  ConfigDataDataInputsJobBenefitListsAllowance.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    return data;
  }
}

class ConfigDataDataInputsJobBenefitListsVariable {
/*
{
  "id": 3,
  "name": "Commission"
} 
*/

  int? id;
  String? name;

  ConfigDataDataInputsJobBenefitListsVariable({
    this.id,
    this.name,
  });
  ConfigDataDataInputsJobBenefitListsVariable.fromJson(
      Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    return data;
  }
}

class ConfigDataDataInputsJobBenefitListsStock {
/*
{
  "id": 1,
  "name": "Equity Incentive"
} 
*/

  int? id;
  String? name;

  ConfigDataDataInputsJobBenefitListsStock({
    this.id,
    this.name,
  });
  ConfigDataDataInputsJobBenefitListsStock.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    return data;
  }
}

class ConfigDataDataInputsJobBenefitLists {
/*
{
  "stock": [
    {
      "id": 1,
      "name": "Equity Incentive"
    }
  ],
  "variable": [
    {
      "id": 3,
      "name": "Commission"
    }
  ],
  "allowance": [
    {
      "id": 5,
      "name": "Telecommunication Allowance"
    }
  ]
} 
*/

  List<ConfigDataDataInputsJobBenefitListsStock?>? stock;
  List<ConfigDataDataInputsJobBenefitListsVariable?>? variable;
  List<ConfigDataDataInputsJobBenefitListsAllowance?>? allowance;

  ConfigDataDataInputsJobBenefitLists({
    this.stock,
    this.variable,
    this.allowance,
  });
  ConfigDataDataInputsJobBenefitLists.fromJson(Map<String, dynamic> json) {
    if (json["stock"] != null) {
      final v = json["stock"];
      final arr0 = <ConfigDataDataInputsJobBenefitListsStock>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobBenefitListsStock.fromJson(v));
      });
      stock = arr0;
    }
    if (json["variable"] != null) {
      final v = json["variable"];
      final arr0 = <ConfigDataDataInputsJobBenefitListsVariable>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobBenefitListsVariable.fromJson(v));
      });
      variable = arr0;
    }
    if (json["allowance"] != null) {
      final v = json["allowance"];
      final arr0 = <ConfigDataDataInputsJobBenefitListsAllowance>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobBenefitListsAllowance.fromJson(v));
      });
      allowance = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (stock != null) {
      final v = stock;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["stock"] = arr0;
    }
    if (variable != null) {
      final v = variable;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["variable"] = arr0;
    }
    if (allowance != null) {
      final v = allowance;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["allowance"] = arr0;
    }
    return data;
  }
}

class ConfigDataDataInputsJobCategoryLists {
/*
{
  "id": 52,
  "key": "actuarial-statistics",
  "value": "Actuarial/Statistics"
} 
*/

  int? id;
  String? key;
  String? value;

  ConfigDataDataInputsJobCategoryLists({
    this.id,
    this.key,
    this.value,
  });
  ConfigDataDataInputsJobCategoryLists.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    key = json["key"]?.toString();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["key"] = key;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataInputsIndustryLists {
/*
{
  "accounting_and_finance": "Accounting & Finance"
} 
*/

  String? key;
  String? value;
  String? accountingAndFinance;

  ConfigDataDataInputsIndustryLists({
    this.accountingAndFinance,
  });
  ConfigDataDataInputsIndustryLists.fromJson(Map<String, dynamic> json) {
    var pattern = "[\\~#%*{}()/:<>?|\"]";
    value = json.values.toString().replaceAll(RegExp(pattern), "");
    key = json.keys.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["accounting_and_finance"] = accountingAndFinance;
    return data;
  }
}

class ConfigDataDataInputsCompanySizes {
/*
{
  "0_to_50": "0 - 50"
} 
*/

  String? the0To_50;

  ConfigDataDataInputsCompanySizes({
    this.the0To_50,
  });
  ConfigDataDataInputsCompanySizes.fromJson(Map<String, dynamic> json) {
    the0To_50 = json["0_to_50"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["0_to_50"] = the0To_50;
    return data;
  }
}

class ConfigDataDataInputsEmpStatus {
/*
{
  "unemployed": "Available to work immediately"
} 
*/

  String? unemployed;

  ConfigDataDataInputsEmpStatus({
    this.unemployed,
  });
  ConfigDataDataInputsEmpStatus.fromJson(Map<String, dynamic> json) {
    unemployed = json["unemployed"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["unemployed"] = unemployed;
    return data;
  }
}

class ConfigDataDataInputsNoOfEmployeeRanges {
/*
{
  "id": 1,
  "value": "0"
} 
*/

  int? id;
  String? value;

  ConfigDataDataInputsNoOfEmployeeRanges({
    this.id,
    this.value,
  });
  ConfigDataDataInputsNoOfEmployeeRanges.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["value"] = value;
    return data;
  }
}

class ConfigDataDataInputsSalaryRanges {
/*
{
  "from": 10000,
  "to": 200000,
  "interval": 5000,
  "upper_bound_scale": 2
} 
*/

  int? from;
  int? to;
  int? interval;
  int? upperBoundScale;

  ConfigDataDataInputsSalaryRanges({
    this.from,
    this.to,
    this.interval,
    this.upperBoundScale,
  });
  ConfigDataDataInputsSalaryRanges.fromJson(Map<String, dynamic> json) {
    from = json["from"]?.toInt();
    to = json["to"]?.toInt();
    interval = json["interval"]?.toInt();
    upperBoundScale = json["upper_bound_scale"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["from"] = from;
    data["to"] = to;
    data["interval"] = interval;
    data["upper_bound_scale"] = upperBoundScale;
    return data;
  }
}

class ConfigDataDataInputsDegrees {
/*
{
  "diploma": "Diploma"
} 
*/

  String? key;
  String? value;
  String? diploma;

  ConfigDataDataInputsDegrees({
    this.diploma,
  });
  ConfigDataDataInputsDegrees.fromJson(Map<String, dynamic> json) {
    var pattern = "[\~#%&*{}():<>?|\"-]";
    value = json.values.toString().replaceAll(RegExp(pattern), "");
    key = json.keys.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["diploma"] = diploma;
    return data;
  }
}

class ConfigDataDataInputsJobTypes {
/*
{
  "full_time": "Full-time"
} 
*/
  String? key;
  String? value;
  String? fullTime;

  ConfigDataDataInputsJobTypes({
    this.fullTime,
  });
  ConfigDataDataInputsJobTypes.fromJson(Map<String, dynamic> json) {
    var pattern = "[\~#%&*{}():<>?|\"-]";
    value = json.values.toString().replaceAll(RegExp(pattern), "");
    key = json.keys.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["full_time"] = fullTime;
    return data;
  }
}

class ConfigDataDataInputsXpLvls {
/*
{
  "1_to_3_years": "1 - 3 years"
} 
*/

  String? key;
  String? value;
  String? the1To_3Years;

  ConfigDataDataInputsXpLvls({
    this.the1To_3Years,
  });
  ConfigDataDataInputsXpLvls.fromJson(Map<String, dynamic> json) {
    var pattern = "[\~#%&*{}():<>?|\"-]";
    value = json.values.toString().replaceAll(RegExp(pattern), "");
    key = json.keys.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["1_to_3_years"] = the1To_3Years;
    return data;
  }
}

class ConfigDataDataInputsGenders {
/*
{
  "male": "Male"
} 
*/

  String? male;

  ConfigDataDataInputsGenders({
    this.male,
  });
  ConfigDataDataInputsGenders.fromJson(Map<String, dynamic> json) {
    male = json["male"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["male"] = male;
    return data;
  }
}

class ConfigDataDataInputsAgeRanges {
/*
{
  "from": 19,
  "to": 100,
  "interval": 1,
  "upper_bound_scale": null
} 
*/

  int? from;
  int? to;
  int? interval;
  String? upperBoundScale;

  ConfigDataDataInputsAgeRanges({
    this.from,
    this.to,
    this.interval,
    this.upperBoundScale,
  });
  ConfigDataDataInputsAgeRanges.fromJson(Map<String, dynamic> json) {
    from = json["from"]?.toInt();
    to = json["to"]?.toInt();
    interval = json["interval"]?.toInt();
    upperBoundScale = json["upper_bound_scale"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["from"] = from;
    data["to"] = to;
    data["interval"] = interval;
    data["upper_bound_scale"] = upperBoundScale;
    return data;
  }
}

class ConfigDataDataInputsFeedback {
/*
{
  "look_for_talents": "Look for talents"
} 
*/

  String? lookForTalents;

  ConfigDataDataInputsFeedback({
    this.lookForTalents,
  });
  ConfigDataDataInputsFeedback.fromJson(Map<String, dynamic> json) {
    lookForTalents = json["look_for_talents"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["look_for_talents"] = lookForTalents;
    return data;
  }
}

class ConfigDataDataInputs {
/*
{
  "feedback": [
    {
      "look_for_talents": "Look for talents"
    }
  ],
  "age_ranges": {
    "from": 19,
    "to": 100,
    "interval": 1,
    "upper_bound_scale": null
  },
  "genders": [
    {
      "male": "Male"
    }
  ],
  "xp_lvls": [
    {
      "1_to_3_years": "1 - 3 years"
    }
  ],
  "job_types": [
    {
      "full_time": "Full-time"
    }
  ],
  "degrees": [
    {
      "diploma": "Diploma"
    }
  ],
  "salary_ranges": {
    "from": 10000,
    "to": 200000,
    "interval": 5000,
    "upper_bound_scale": 2
  },
  "no_of_employee_ranges": [
    {
      "id": 1,
      "value": "0"
    }
  ],
  "emp_status": [
    {
      "unemployed": "Available to work immediately"
    }
  ],
  "company_sizes": [
    {
      "0_to_50": "0 - 50"
    }
  ],
  "industry_lists": [
    {
      "accounting_and_finance": "Accounting & Finance"
    }
  ],
  "job_category_lists": [
    {
      "id": 52,
      "key": "actuarial-statistics",
      "value": "Actuarial/Statistics"
    }
  ],
  "job_benefit_lists": {
    "stock": [
      {
        "id": 1,
        "name": "Equity Incentive"
      }
    ],
    "variable": [
      {
        "id": 3,
        "name": "Commission"
      }
    ],
    "allowance": [
      {
        "id": 5,
        "name": "Telecommunication Allowance"
      }
    ]
  },
  "job_attractive_reasons": [
    {
      "id": 1,
      "value": "Stable Company"
    }
  ],
  "company_benefit_lists": {
    "insurance_health_wellness": [
      {
        "id": 1,
        "value": "Life Insurance",
        "category": "insurance_health_wellness"
      }
    ],
    "perks_benefits": [
      {
        "id": 8,
        "value": "Free Meals",
        "category": "perks_benefits"
      }
    ],
    "leave": [
      {
        "id": 18,
        "value": "Work From Home",
        "category": "leave"
      }
    ]
  },
  "company_culture_lists": {
    "team_collaboration": [
      {
        "id": 1,
        "value": "Diverse Team",
        "category": "team_collaboration"
      }
    ],
    "daily_routines": [
      {
        "id": 8,
        "value": "English Speaking",
        "category": "daily_routines"
      }
    ],
    "career_growth": [
      {
        "id": 15,
        "value": "Internal Mobility",
        "category": "career_growth"
      }
    ],
    "personal_health": [
      {
        "id": 20,
        "value": "Work/Life Balance",
        "category": "personal_health"
      }
    ],
    "strategy": [
      {
        "id": 25,
        "value": "Data-Driven",
        "category": "strategy"
      }
    ]
  },
  "country_lists": [
    {
      "af": "Afghanistan"
    }
  ],
  "social_types": [
    {
      "behance": "Behance",
      "url": "https://www.behance.net/"
    }
  ],
  "location_lists": [
    {
      "key": "ncr",
      "value": "NCR",
      "display_name": "National Capital Region",
      "priority_order": 1,
      "locations": [
        {
          "key": "bgc",
          "value": "Bonifacio Global City",
          "is_popular": false,
          "region": "National Capital Region"
        }
      ]
    }
  ],
  "chat_report_lists": [
    {
      "id": 1,
      "value": "This person contains false information."
    }
  ],
  "notice_period_lists": [
    {
      "id": 1,
      "value": "Immediate"
    }
  ],
  "subscibe_job_frequency_lists": [
    {
      "id": 1,
      "value": "Daily"
    }
  ],
  "payment_packages": {
    "subscriptions": [
      {
        "name": "Free",
        "monthly_fee": 0,
        "annual_fee": 0,
        "monthly_job_credit": 0,
        "monthly_feature_job_credit": 0,
        "monthly_urgent_job_credit": 0,
        "monthly_unlock_talent_credit": 0,
        "max_no_of_screening_questions_per_job": 0,
        "max_no_of_emails_to_receive_resume_per_job": 0,
        "category": "free",
        "partner_network": true,
        "feature_job": false,
        "urgent_job": false,
        "auto_generate_job_description": false,
        "screening_question": false,
        "job_mirroring": false,
        "redirect_external_url": false,
        "job_salary_masking": false,
        "view_application_on_website": true,
        "applicant_status_tracking": true,
        "receive_resume_in_email": false,
        "advance_resume_scoring": false,
        "export_application_in_excel": false,
        "live_chat_with_applicant": true,
        "branded_employer_career_page": true,
        "top_employer_logo": false,
        "basic_statistic_job_view_and_application": false,
        "export_job_statistic_in_excel": false,
        "phone_chat_email_support": true,
        "dedicated_account_manager": false,
        "robo_headhunting": false,
        "resume_request": false,
        "payment_key": "free",
        "payment_category": "subscription"
      }
    ],
    "jobs": [
      {
        "payment_key": "1_job_posts",
        "payment_category": "job",
        "job_post": 1,
        "credit": 20,
        "boss_point": 2300,
        "actual_amount": 4600,
        "amount": 2300,
        "popular": false,
        "add_ons": [
          {
            "label": "90 days exposure",
            "exposure_days": 90,
            "included": true
          }
        ]
      }
    ],
    "credits": [
      {
        "payment_key": "20_credits",
        "payment_category": "credit",
        "credit": 20,
        "boss_point": 3450,
        "actual_amount": 6900,
        "amount": 3450,
        "popular": false,
        "add_ons": [
          {
            "label": "3,450 Free Bosspoints",
            "free_boss_point": 3450,
            "included": true,
            "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
          }
        ]
      }
    ]
  },
  "product_feature_banners": [
    {
      "title": "Robo-Headhunting",
      "sub_title": null,
      "description": "Let us provide you with suitable candidates who are interested in your jobs.",
      "cta_text": "Learn More",
      "cta_url": "https://blog.bossjob.ph/hiring-tips/1458/its-a-match-let-bossjobs-robo-headhunting-service-find-the-best-jobs-for-you-24-7/",
      "sort_order": 1
    }
  ],
  "homepage_feature_banners": [
    {
      "logo_url": null,
      "cover_pic_url": "https://assets.bossjob.com/feature-banners/1/cover-pic/92ea69daa50d0b74eed578d66f74af5d.png",
      "tablet_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/tablet-cover-pic/72c3262a5b1733cd2114bcd9de39044e.png",
      "mobile_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/mobile-cover-pic/ddc2f7d82f297b40217bf6a757957a60.png",
      "title": "Jobs for Professionals.",
      "description": "Get your dream job today",
      "description_color": "#ffffff",
      "color_code": "#ffffff",
      "button_color": "#ffffff",
      "cta_text": "View jobs",
      "cta_text_color": "#003649",
      "cta_url": "https://bossjob.ph/jobs-hiring/",
      "sort_order": 1
    }
  ],
  "job_page_right_side_banners": [
    {
      "alt": "Homebased Jobs",
      "image_url": "https://assets.bossjob.com/right-side-banners/None/image8a10b9e03549b4dba745bcf2022e1885.png",
      "mobile_image_url": "https://assets.bossjob.com/right-side-banners/None/mobile-image1b2dbd11715f1c87ed4ed04d9d2a0746.png",
      "cta_url": "https://bossjob.ph/dashboard/jobs/all/1?query=all&jobLocation=Homebased&utm_source=Bossjob&utm_medium=sidebanner&utm_campaign=homebased_jobs"
    }
  ]
} 
*/

  List<ConfigDataDataInputsFeedback?>? feedback;
  ConfigDataDataInputsAgeRanges? ageRanges;
  List<ConfigDataDataInputsGenders?>? genders;
  List<ConfigDataDataInputsXpLvls?>? xpLvls;
  List<ConfigDataDataInputsJobTypes?>? jobTypes;
  List<ConfigDataDataInputsDegrees?>? degrees;
  ConfigDataDataInputsSalaryRanges? salaryRanges;
  List<ConfigDataDataInputsNoOfEmployeeRanges?>? noOfEmployeeRanges;
  List<ConfigDataDataInputsEmpStatus?>? empStatus;
  List<ConfigDataDataInputsCompanySizes?>? companySizes;
  List<ConfigDataDataInputsIndustryLists?>? industryLists;
  List<ConfigDataDataInputsJobCategoryLists?>? jobCategoryLists;
  ConfigDataDataInputsJobBenefitLists? jobBenefitLists;
  List<ConfigDataDataInputsJobAttractiveReasons?>? jobAttractiveReasons;
  ConfigDataDataInputsCompanyBenefitLists? companyBenefitLists;
  ConfigDataDataInputsCompanyCultureLists? companyCultureLists;
  List<ConfigDataDataInputsCountryLists?>? countryLists;
  List<ConfigDataDataInputsSocialTypes?>? socialTypes;
  List<ConfigDataDataInputsLocationLists?>? locationLists;
  List<GameBetModelDataInputsSmsCountryLists?>? smsCountryLists;
  List<ConfigDataDataInputsChatReportLists?>? chatReportLists;
  List<ConfigDataDataInputsNoticePeriodLists?>? noticePeriodLists;
  List<ConfigDataDataInputsSubscibeJobFrequencyLists?>?
      subscibeJobFrequencyLists;
  ConfigDataDataInputsPaymentPackages? paymentPackages;
  List<ConfigDataDataInputsProductFeatureBanners?>? productFeatureBanners;
  List<ConfigDataDataInputsHomepageFeatureBanners?>? homepageFeatureBanners;
  List<ConfigDataDataInputsJobPageRightSideBanners?>? jobPageRightSideBanners;

  ConfigDataDataInputs({
    this.feedback,
    this.ageRanges,
    this.genders,
    this.xpLvls,
    this.jobTypes,
    this.degrees,
    this.salaryRanges,
    this.noOfEmployeeRanges,
    this.empStatus,
    this.companySizes,
    this.industryLists,
    this.jobCategoryLists,
    this.jobBenefitLists,
    this.jobAttractiveReasons,
    this.companyBenefitLists,
    this.companyCultureLists,
    this.countryLists,
    this.socialTypes,
    this.locationLists,
    this.smsCountryLists,
    this.chatReportLists,
    this.noticePeriodLists,
    this.subscibeJobFrequencyLists,
    this.paymentPackages,
    this.productFeatureBanners,
    this.homepageFeatureBanners,
    this.jobPageRightSideBanners,
  });
  ConfigDataDataInputs.fromJson(Map<String, dynamic> json) {
    if (json["feedback"] != null) {
      final v = json["feedback"];
      final arr0 = <ConfigDataDataInputsFeedback>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsFeedback.fromJson(v));
      });
      feedback = arr0;
    }
    ageRanges = (json["age_ranges"] != null)
        ? ConfigDataDataInputsAgeRanges.fromJson(json["age_ranges"])
        : null;
    if (json["genders"] != null) {
      final v = json["genders"];
      final arr0 = <ConfigDataDataInputsGenders>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsGenders.fromJson(v));
      });
      genders = arr0;
    }
    if (json["xp_lvls"] != null) {
      final v = json["xp_lvls"];
      final arr0 = <ConfigDataDataInputsXpLvls>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsXpLvls.fromJson(v));
      });
      xpLvls = arr0;
    }
    if (json["job_types"] != null) {
      final v = json["job_types"];
      final arr0 = <ConfigDataDataInputsJobTypes>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobTypes.fromJson(v));
      });
      jobTypes = arr0;
    }
    if (json["degrees"] != null) {
      final v = json["degrees"];
      final arr0 = <ConfigDataDataInputsDegrees>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsDegrees.fromJson(v));
      });
      degrees = arr0;
    }
    salaryRanges = (json["salary_ranges"] != null)
        ? ConfigDataDataInputsSalaryRanges.fromJson(json["salary_ranges"])
        : null;
    if (json["no_of_employee_ranges"] != null) {
      final v = json["no_of_employee_ranges"];
      final arr0 = <ConfigDataDataInputsNoOfEmployeeRanges>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsNoOfEmployeeRanges.fromJson(v));
      });
      noOfEmployeeRanges = arr0;
    }
    if (json["emp_status"] != null) {
      final v = json["emp_status"];
      final arr0 = <ConfigDataDataInputsEmpStatus>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsEmpStatus.fromJson(v));
      });
      empStatus = arr0;
    }
    if (json["company_sizes"] != null) {
      final v = json["company_sizes"];
      final arr0 = <ConfigDataDataInputsCompanySizes>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsCompanySizes.fromJson(v));
      });
      companySizes = arr0;
    }
    if (json["industry_lists"] != null) {
      final v = json["industry_lists"];
      final arr0 = <ConfigDataDataInputsIndustryLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsIndustryLists.fromJson(v));
      });
      industryLists = arr0;
    }
    if (json["job_category_lists"] != null) {
      final v = json["job_category_lists"];
      final arr0 = <ConfigDataDataInputsJobCategoryLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobCategoryLists.fromJson(v));
      });
      jobCategoryLists = arr0;
    }
    jobBenefitLists = (json["job_benefit_lists"] != null)
        ? ConfigDataDataInputsJobBenefitLists.fromJson(
            json["job_benefit_lists"])
        : null;
    if (json["job_attractive_reasons"] != null) {
      final v = json["job_attractive_reasons"];
      final arr0 = <ConfigDataDataInputsJobAttractiveReasons>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobAttractiveReasons.fromJson(v));
      });
      jobAttractiveReasons = arr0;
    }
    companyBenefitLists = (json["company_benefit_lists"] != null)
        ? ConfigDataDataInputsCompanyBenefitLists.fromJson(
            json["company_benefit_lists"])
        : null;
    companyCultureLists = (json["company_culture_lists"] != null)
        ? ConfigDataDataInputsCompanyCultureLists.fromJson(
            json["company_culture_lists"])
        : null;
    if (json["country_lists"] != null) {
      final v = json["country_lists"];
      final arr0 = <ConfigDataDataInputsCountryLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsCountryLists.fromJson(v));
      });
      countryLists = arr0;
    }
    if (json['sms_country_lists'] != null) {
      final v = json['sms_country_lists'];
      final arr0 = <GameBetModelDataInputsSmsCountryLists>[];
      v.forEach((v) {
        arr0.add(GameBetModelDataInputsSmsCountryLists.fromJson(v));
      });
      smsCountryLists = arr0;
    }
    if (json["social_types"] != null) {
      final v = json["social_types"];
      final arr0 = <ConfigDataDataInputsSocialTypes>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsSocialTypes.fromJson(v));
      });
      socialTypes = arr0;
    }
    if (json["location_lists"] != null) {
      final v = json["location_lists"];
      final arr0 = <ConfigDataDataInputsLocationLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsLocationLists.fromJson(v));
      });
      locationLists = arr0;
    }
    if (json["chat_report_lists"] != null) {
      final v = json["chat_report_lists"];
      final arr0 = <ConfigDataDataInputsChatReportLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsChatReportLists.fromJson(v));
      });
      chatReportLists = arr0;
    }
    if (json["notice_period_lists"] != null) {
      final v = json["notice_period_lists"];
      final arr0 = <ConfigDataDataInputsNoticePeriodLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsNoticePeriodLists.fromJson(v));
      });
      noticePeriodLists = arr0;
    }
    if (json["subscibe_job_frequency_lists"] != null) {
      final v = json["subscibe_job_frequency_lists"];
      final arr0 = <ConfigDataDataInputsSubscibeJobFrequencyLists>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsSubscibeJobFrequencyLists.fromJson(v));
      });
      subscibeJobFrequencyLists = arr0;
    }
    paymentPackages = (json["payment_packages"] != null)
        ? ConfigDataDataInputsPaymentPackages.fromJson(json["payment_packages"])
        : null;
    if (json["product_feature_banners"] != null) {
      final v = json["product_feature_banners"];
      final arr0 = <ConfigDataDataInputsProductFeatureBanners>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsProductFeatureBanners.fromJson(v));
      });
      productFeatureBanners = arr0;
    }
    if (json["homepage_feature_banners"] != null) {
      final v = json["homepage_feature_banners"];
      final arr0 = <ConfigDataDataInputsHomepageFeatureBanners>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsHomepageFeatureBanners.fromJson(v));
      });
      homepageFeatureBanners = arr0;
    }
    if (json["job_page_right_side_banners"] != null) {
      final v = json["job_page_right_side_banners"];
      final arr0 = <ConfigDataDataInputsJobPageRightSideBanners>[];
      v.forEach((v) {
        arr0.add(ConfigDataDataInputsJobPageRightSideBanners.fromJson(v));
      });
      jobPageRightSideBanners = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (feedback != null) {
      final v = feedback;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["feedback"] = arr0;
    }
    if (ageRanges != null) {
      data["age_ranges"] = ageRanges!.toJson();
    }
    if (genders != null) {
      final v = genders;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["genders"] = arr0;
    }
    if (xpLvls != null) {
      final v = xpLvls;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["xp_lvls"] = arr0;
    }
    if (jobTypes != null) {
      final v = jobTypes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_types"] = arr0;
    }
    if (degrees != null) {
      final v = degrees;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["degrees"] = arr0;
    }
    if (salaryRanges != null) {
      data["salary_ranges"] = salaryRanges!.toJson();
    }
    if (noOfEmployeeRanges != null) {
      final v = noOfEmployeeRanges;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["no_of_employee_ranges"] = arr0;
    }
    if (empStatus != null) {
      final v = empStatus;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["emp_status"] = arr0;
    }
    if (companySizes != null) {
      final v = companySizes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["company_sizes"] = arr0;
    }
    if (industryLists != null) {
      final v = industryLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["industry_lists"] = arr0;
    }
    if (jobCategoryLists != null) {
      final v = jobCategoryLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_category_lists"] = arr0;
    }
    if (jobBenefitLists != null) {
      data["job_benefit_lists"] = jobBenefitLists!.toJson();
    }
    if (jobAttractiveReasons != null) {
      final v = jobAttractiveReasons;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_attractive_reasons"] = arr0;
    }
    if (companyBenefitLists != null) {
      data["company_benefit_lists"] = companyBenefitLists!.toJson();
    }
    if (companyCultureLists != null) {
      data["company_culture_lists"] = companyCultureLists!.toJson();
    }
    if (countryLists != null) {
      final v = countryLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["country_lists"] = arr0;
    }
    if (smsCountryLists != null) {
      final v = smsCountryLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['sms_country_lists'] = arr0;
    }
    if (socialTypes != null) {
      final v = socialTypes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["social_types"] = arr0;
    }
    if (locationLists != null) {
      final v = locationLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["location_lists"] = arr0;
    }
    if (chatReportLists != null) {
      final v = chatReportLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["chat_report_lists"] = arr0;
    }
    if (noticePeriodLists != null) {
      final v = noticePeriodLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["notice_period_lists"] = arr0;
    }
    if (subscibeJobFrequencyLists != null) {
      final v = subscibeJobFrequencyLists;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["subscibe_job_frequency_lists"] = arr0;
    }
    if (paymentPackages != null) {
      data["payment_packages"] = paymentPackages!.toJson();
    }
    if (productFeatureBanners != null) {
      final v = productFeatureBanners;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["product_feature_banners"] = arr0;
    }
    if (homepageFeatureBanners != null) {
      final v = homepageFeatureBanners;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["homepage_feature_banners"] = arr0;
    }
    if (jobPageRightSideBanners != null) {
      final v = jobPageRightSideBanners;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["job_page_right_side_banners"] = arr0;
    }
    return data;
  }
}

class ConfigDataData {
/*
{
  "inputs": {
    "feedback": [
      {
        "look_for_talents": "Look for talents"
      }
    ],
    "age_ranges": {
      "from": 19,
      "to": 100,
      "interval": 1,
      "upper_bound_scale": null
    },
    "genders": [
      {
        "male": "Male"
      }
    ],
    "xp_lvls": [
      {
        "1_to_3_years": "1 - 3 years"
      }
    ],
    "job_types": [
      {
        "full_time": "Full-time"
      }
    ],
    "degrees": [
      {
        "diploma": "Diploma"
      }
    ],
    "salary_ranges": {
      "from": 10000,
      "to": 200000,
      "interval": 5000,
      "upper_bound_scale": 2
    },
    "no_of_employee_ranges": [
      {
        "id": 1,
        "value": "0"
      }
    ],
    "emp_status": [
      {
        "unemployed": "Available to work immediately"
      }
    ],
    "company_sizes": [
      {
        "0_to_50": "0 - 50"
      }
    ],
    "industry_lists": [
      {
        "accounting_and_finance": "Accounting & Finance"
      }
    ],
    "job_category_lists": [
      {
        "id": 52,
        "key": "actuarial-statistics",
        "value": "Actuarial/Statistics"
      }
    ],
    "job_benefit_lists": {
      "stock": [
        {
          "id": 1,
          "name": "Equity Incentive"
        }
      ],
      "variable": [
        {
          "id": 3,
          "name": "Commission"
        }
      ],
      "allowance": [
        {
          "id": 5,
          "name": "Telecommunication Allowance"
        }
      ]
    },
    "job_attractive_reasons": [
      {
        "id": 1,
        "value": "Stable Company"
      }
    ],
    "company_benefit_lists": {
      "insurance_health_wellness": [
        {
          "id": 1,
          "value": "Life Insurance",
          "category": "insurance_health_wellness"
        }
      ],
      "perks_benefits": [
        {
          "id": 8,
          "value": "Free Meals",
          "category": "perks_benefits"
        }
      ],
      "leave": [
        {
          "id": 18,
          "value": "Work From Home",
          "category": "leave"
        }
      ]
    },
    "company_culture_lists": {
      "team_collaboration": [
        {
          "id": 1,
          "value": "Diverse Team",
          "category": "team_collaboration"
        }
      ],
      "daily_routines": [
        {
          "id": 8,
          "value": "English Speaking",
          "category": "daily_routines"
        }
      ],
      "career_growth": [
        {
          "id": 15,
          "value": "Internal Mobility",
          "category": "career_growth"
        }
      ],
      "personal_health": [
        {
          "id": 20,
          "value": "Work/Life Balance",
          "category": "personal_health"
        }
      ],
      "strategy": [
        {
          "id": 25,
          "value": "Data-Driven",
          "category": "strategy"
        }
      ]
    },
    "country_lists": [
      {
        "af": "Afghanistan"
      }
    ],
    "social_types": [
      {
        "behance": "Behance",
        "url": "https://www.behance.net/"
      }
    ],
    "location_lists": [
      {
        "key": "ncr",
        "value": "NCR",
        "display_name": "National Capital Region",
        "priority_order": 1,
        "locations": [
          {
            "key": "bgc",
            "value": "Bonifacio Global City",
            "is_popular": false,
            "region": "National Capital Region"
          }
        ]
      }
    ],
    "chat_report_lists": [
      {
        "id": 1,
        "value": "This person contains false information."
      }
    ],
    "notice_period_lists": [
      {
        "id": 1,
        "value": "Immediate"
      }
    ],
    "subscibe_job_frequency_lists": [
      {
        "id": 1,
        "value": "Daily"
      }
    ],
    "payment_packages": {
      "subscriptions": [
        {
          "name": "Free",
          "monthly_fee": 0,
          "annual_fee": 0,
          "monthly_job_credit": 0,
          "monthly_feature_job_credit": 0,
          "monthly_urgent_job_credit": 0,
          "monthly_unlock_talent_credit": 0,
          "max_no_of_screening_questions_per_job": 0,
          "max_no_of_emails_to_receive_resume_per_job": 0,
          "category": "free",
          "partner_network": true,
          "feature_job": false,
          "urgent_job": false,
          "auto_generate_job_description": false,
          "screening_question": false,
          "job_mirroring": false,
          "redirect_external_url": false,
          "job_salary_masking": false,
          "view_application_on_website": true,
          "applicant_status_tracking": true,
          "receive_resume_in_email": false,
          "advance_resume_scoring": false,
          "export_application_in_excel": false,
          "live_chat_with_applicant": true,
          "branded_employer_career_page": true,
          "top_employer_logo": false,
          "basic_statistic_job_view_and_application": false,
          "export_job_statistic_in_excel": false,
          "phone_chat_email_support": true,
          "dedicated_account_manager": false,
          "robo_headhunting": false,
          "resume_request": false,
          "payment_key": "free",
          "payment_category": "subscription"
        }
      ],
      "jobs": [
        {
          "payment_key": "1_job_posts",
          "payment_category": "job",
          "job_post": 1,
          "credit": 20,
          "boss_point": 2300,
          "actual_amount": 4600,
          "amount": 2300,
          "popular": false,
          "add_ons": [
            {
              "label": "90 days exposure",
              "exposure_days": 90,
              "included": true
            }
          ]
        }
      ],
      "credits": [
        {
          "payment_key": "20_credits",
          "payment_category": "credit",
          "credit": 20,
          "boss_point": 3450,
          "actual_amount": 6900,
          "amount": 3450,
          "popular": false,
          "add_ons": [
            {
              "label": "3,450 Free Bosspoints",
              "free_boss_point": 3450,
              "included": true,
              "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
            }
          ]
        }
      ]
    },
    "product_feature_banners": [
      {
        "title": "Robo-Headhunting",
        "sub_title": null,
        "description": "Let us provide you with suitable candidates who are interested in your jobs.",
        "cta_text": "Learn More",
        "cta_url": "https://blog.bossjob.ph/hiring-tips/1458/its-a-match-let-bossjobs-robo-headhunting-service-find-the-best-jobs-for-you-24-7/",
        "sort_order": 1
      }
    ],
    "homepage_feature_banners": [
      {
        "logo_url": null,
        "cover_pic_url": "https://assets.bossjob.com/feature-banners/1/cover-pic/92ea69daa50d0b74eed578d66f74af5d.png",
        "tablet_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/tablet-cover-pic/72c3262a5b1733cd2114bcd9de39044e.png",
        "mobile_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/mobile-cover-pic/ddc2f7d82f297b40217bf6a757957a60.png",
        "title": "Jobs for Professionals.",
        "description": "Get your dream job today",
        "description_color": "#ffffff",
        "color_code": "#ffffff",
        "button_color": "#ffffff",
        "cta_text": "View jobs",
        "cta_text_color": "#003649",
        "cta_url": "https://bossjob.ph/jobs-hiring/",
        "sort_order": 1
      }
    ],
    "job_page_right_side_banners": [
      {
        "alt": "Homebased Jobs",
        "image_url": "https://assets.bossjob.com/right-side-banners/None/image8a10b9e03549b4dba745bcf2022e1885.png",
        "mobile_image_url": "https://assets.bossjob.com/right-side-banners/None/mobile-image1b2dbd11715f1c87ed4ed04d9d2a0746.png",
        "cta_url": "https://bossjob.ph/dashboard/jobs/all/1?query=all&jobLocation=Homebased&utm_source=Bossjob&utm_medium=sidebanner&utm_campaign=homebased_jobs"
      }
    ]
  },
  "statuses": {
    "users": [
      {
        "pending": "Pending"
      }
    ],
    "jobs": [
      {
        "draft": "Draft"
      }
    ],
    "company_documents": [
      {
        "pending": "Pending"
      }
    ],
    "recruiter_documents": [
      {
        "pending": "Pending"
      }
    ],
    "job_seeker_work_xps": [
      {
        "active": "Active"
      }
    ],
    "job_seeker_prefs": [
      {
        "active": "Active"
      }
    ],
    "job_seeker_edus": [
      {
        "active": "Active"
      }
    ],
    "saved_jobs": [
      {
        "active": "Active"
      }
    ],
    "saved_candidates": [
      {
        "active": "Active"
      }
    ],
    "blacklisted_users": [
      {
        "active": "Active"
      }
    ],
    "blacklisted_companies": [
      {
        "active": "Active"
      }
    ],
    "job_seeker_resumes": [
      {
        "active": "Active"
      }
    ],
    "job_applications": [
      {
        "id": 1,
        "value": "New"
      }
    ],
    "dialogues": [
      {
        "id": 1,
        "value": "Active"
      }
    ],
    "chats": [
      {
        "id": 1,
        "value": "New"
      }
    ]
  },
  "filters": {
    "work_xps": [
      {
        "1_to_3_years": "1 - 3 years"
      }
    ],
    "educations": [
      {
        "diploma": "Diploma"
      }
    ],
    "salary_range_filters": [
      {
        "10K_to_30K": "10K - 30K"
      }
    ],
    "company_sizes": [
      {
        "0_to_50": "0 - 50"
      }
    ]
  },
  "settings": {
    "credit_limits": {
      "chat": {
        "limit": 5,
        "per": "day"
      },
      "job": {
        "limit": 1,
        "per": "month"
      }
    }
  },
  "updated_at": "2021-08-31T04:24:29.610642Z",
  "block_users": [
    111
  ]
} 
*/

  ConfigDataDataInputs? inputs;
  ConfigDataDataStatuses? statuses;
  ConfigDataDataFilters? filters;
  ConfigDataDataSettings? settings;
  String? updatedAt;
  List<int?>? blockUsers;

  ConfigDataData({
    this.inputs,
    this.statuses,
    this.filters,
    this.settings,
    this.updatedAt,
    this.blockUsers,
  });
  ConfigDataData.fromJson(Map<String, dynamic> json) {
    inputs = (json["inputs"] != null)
        ? ConfigDataDataInputs.fromJson(json["inputs"])
        : null;
    statuses = (json["statuses"] != null)
        ? ConfigDataDataStatuses.fromJson(json["statuses"])
        : null;
    filters = (json["filters"] != null)
        ? ConfigDataDataFilters.fromJson(json["filters"])
        : null;
    settings = (json["settings"] != null)
        ? ConfigDataDataSettings.fromJson(json["settings"])
        : null;
    updatedAt = json["updated_at"]?.toString();
    if (json["block_users"] != null) {
      final v = json["block_users"];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      blockUsers = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (inputs != null) {
      data["inputs"] = inputs!.toJson();
    }
    if (statuses != null) {
      data["statuses"] = statuses!.toJson();
    }
    if (filters != null) {
      data["filters"] = filters!.toJson();
    }
    if (settings != null) {
      data["settings"] = settings!.toJson();
    }
    data["updated_at"] = updatedAt;
    if (blockUsers != null) {
      final v = blockUsers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data["block_users"] = arr0;
    }
    return data;
  }
}

class ConfigData {
/*
{
  "message": "OK",
  "data": {
    "inputs": {
      "feedback": [
        {
          "look_for_talents": "Look for talents"
        }
      ],
      "age_ranges": {
        "from": 19,
        "to": 100,
        "interval": 1,
        "upper_bound_scale": null
      },
      "genders": [
        {
          "male": "Male"
        }
      ],
      "xp_lvls": [
        {
          "1_to_3_years": "1 - 3 years"
        }
      ],
      "job_types": [
        {
          "full_time": "Full-time"
        }
      ],
      "degrees": [
        {
          "diploma": "Diploma"
        }
      ],
      "salary_ranges": {
        "from": 10000,
        "to": 200000,
        "interval": 5000,
        "upper_bound_scale": 2
      },
      "no_of_employee_ranges": [
        {
          "id": 1,
          "value": "0"
        }
      ],
      "emp_status": [
        {
          "unemployed": "Available to work immediately"
        }
      ],
      "company_sizes": [
        {
          "0_to_50": "0 - 50"
        }
      ],
      "industry_lists": [
        {
          "accounting_and_finance": "Accounting & Finance"
        }
      ],
      "job_category_lists": [
        {
          "id": 52,
          "key": "actuarial-statistics",
          "value": "Actuarial/Statistics"
        }
      ],
      "job_benefit_lists": {
        "stock": [
          {
            "id": 1,
            "name": "Equity Incentive"
          }
        ],
        "variable": [
          {
            "id": 3,
            "name": "Commission"
          }
        ],
        "allowance": [
          {
            "id": 5,
            "name": "Telecommunication Allowance"
          }
        ]
      },
      "job_attractive_reasons": [
        {
          "id": 1,
          "value": "Stable Company"
        }
      ],
      "company_benefit_lists": {
        "insurance_health_wellness": [
          {
            "id": 1,
            "value": "Life Insurance",
            "category": "insurance_health_wellness"
          }
        ],
        "perks_benefits": [
          {
            "id": 8,
            "value": "Free Meals",
            "category": "perks_benefits"
          }
        ],
        "leave": [
          {
            "id": 18,
            "value": "Work From Home",
            "category": "leave"
          }
        ]
      },
      "company_culture_lists": {
        "team_collaboration": [
          {
            "id": 1,
            "value": "Diverse Team",
            "category": "team_collaboration"
          }
        ],
        "daily_routines": [
          {
            "id": 8,
            "value": "English Speaking",
            "category": "daily_routines"
          }
        ],
        "career_growth": [
          {
            "id": 15,
            "value": "Internal Mobility",
            "category": "career_growth"
          }
        ],
        "personal_health": [
          {
            "id": 20,
            "value": "Work/Life Balance",
            "category": "personal_health"
          }
        ],
        "strategy": [
          {
            "id": 25,
            "value": "Data-Driven",
            "category": "strategy"
          }
        ]
      },
      "country_lists": [
        {
          "af": "Afghanistan"
        }
      ],
      "social_types": [
        {
          "behance": "Behance",
          "url": "https://www.behance.net/"
        }
      ],
      "location_lists": [
        {
          "key": "ncr",
          "value": "NCR",
          "display_name": "National Capital Region",
          "priority_order": 1,
          "locations": [
            {
              "key": "bgc",
              "value": "Bonifacio Global City",
              "is_popular": false,
              "region": "National Capital Region"
            }
          ]
        }
      ],
      "chat_report_lists": [
        {
          "id": 1,
          "value": "This person contains false information."
        }
      ],
      "notice_period_lists": [
        {
          "id": 1,
          "value": "Immediate"
        }
      ],
      "subscibe_job_frequency_lists": [
        {
          "id": 1,
          "value": "Daily"
        }
      ],
      "payment_packages": {
        "subscriptions": [
          {
            "name": "Free",
            "monthly_fee": 0,
            "annual_fee": 0,
            "monthly_job_credit": 0,
            "monthly_feature_job_credit": 0,
            "monthly_urgent_job_credit": 0,
            "monthly_unlock_talent_credit": 0,
            "max_no_of_screening_questions_per_job": 0,
            "max_no_of_emails_to_receive_resume_per_job": 0,
            "category": "free",
            "partner_network": true,
            "feature_job": false,
            "urgent_job": false,
            "auto_generate_job_description": false,
            "screening_question": false,
            "job_mirroring": false,
            "redirect_external_url": false,
            "job_salary_masking": false,
            "view_application_on_website": true,
            "applicant_status_tracking": true,
            "receive_resume_in_email": false,
            "advance_resume_scoring": false,
            "export_application_in_excel": false,
            "live_chat_with_applicant": true,
            "branded_employer_career_page": true,
            "top_employer_logo": false,
            "basic_statistic_job_view_and_application": false,
            "export_job_statistic_in_excel": false,
            "phone_chat_email_support": true,
            "dedicated_account_manager": false,
            "robo_headhunting": false,
            "resume_request": false,
            "payment_key": "free",
            "payment_category": "subscription"
          }
        ],
        "jobs": [
          {
            "payment_key": "1_job_posts",
            "payment_category": "job",
            "job_post": 1,
            "credit": 20,
            "boss_point": 2300,
            "actual_amount": 4600,
            "amount": 2300,
            "popular": false,
            "add_ons": [
              {
                "label": "90 days exposure",
                "exposure_days": 90,
                "included": true
              }
            ]
          }
        ],
        "credits": [
          {
            "payment_key": "20_credits",
            "payment_category": "credit",
            "credit": 20,
            "boss_point": 3450,
            "actual_amount": 6900,
            "amount": 3450,
            "popular": false,
            "add_ons": [
              {
                "label": "3,450 Free Bosspoints",
                "free_boss_point": 3450,
                "included": true,
                "tool_tip_text": "Bosspoints are points you earn as you hire talents. Your points can be redeemed for incredible rewards!"
              }
            ]
          }
        ]
      },
      "product_feature_banners": [
        {
          "title": "Robo-Headhunting",
          "sub_title": null,
          "description": "Let us provide you with suitable candidates who are interested in your jobs.",
          "cta_text": "Learn More",
          "cta_url": "https://blog.bossjob.ph/hiring-tips/1458/its-a-match-let-bossjobs-robo-headhunting-service-find-the-best-jobs-for-you-24-7/",
          "sort_order": 1
        }
      ],
      "homepage_feature_banners": [
        {
          "logo_url": null,
          "cover_pic_url": "https://assets.bossjob.com/feature-banners/1/cover-pic/92ea69daa50d0b74eed578d66f74af5d.png",
          "tablet_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/tablet-cover-pic/72c3262a5b1733cd2114bcd9de39044e.png",
          "mobile_cover_pic_url": "https://assets.bossjob.com/feature-banners/1/mobile-cover-pic/ddc2f7d82f297b40217bf6a757957a60.png",
          "title": "Jobs for Professionals.",
          "description": "Get your dream job today",
          "description_color": "#ffffff",
          "color_code": "#ffffff",
          "button_color": "#ffffff",
          "cta_text": "View jobs",
          "cta_text_color": "#003649",
          "cta_url": "https://bossjob.ph/jobs-hiring/",
          "sort_order": 1
        }
      ],
      "job_page_right_side_banners": [
        {
          "alt": "Homebased Jobs",
          "image_url": "https://assets.bossjob.com/right-side-banners/None/image8a10b9e03549b4dba745bcf2022e1885.png",
          "mobile_image_url": "https://assets.bossjob.com/right-side-banners/None/mobile-image1b2dbd11715f1c87ed4ed04d9d2a0746.png",
          "cta_url": "https://bossjob.ph/dashboard/jobs/all/1?query=all&jobLocation=Homebased&utm_source=Bossjob&utm_medium=sidebanner&utm_campaign=homebased_jobs"
        }
      ]
    },
    "statuses": {
      "users": [
        {
          "pending": "Pending"
        }
      ],
      "jobs": [
        {
          "draft": "Draft"
        }
      ],
      "company_documents": [
        {
          "pending": "Pending"
        }
      ],
      "recruiter_documents": [
        {
          "pending": "Pending"
        }
      ],
      "job_seeker_work_xps": [
        {
          "active": "Active"
        }
      ],
      "job_seeker_prefs": [
        {
          "active": "Active"
        }
      ],
      "job_seeker_edus": [
        {
          "active": "Active"
        }
      ],
      "saved_jobs": [
        {
          "active": "Active"
        }
      ],
      "saved_candidates": [
        {
          "active": "Active"
        }
      ],
      "blacklisted_users": [
        {
          "active": "Active"
        }
      ],
      "blacklisted_companies": [
        {
          "active": "Active"
        }
      ],
      "job_seeker_resumes": [
        {
          "active": "Active"
        }
      ],
      "job_applications": [
        {
          "id": 1,
          "value": "New"
        }
      ],
      "dialogues": [
        {
          "id": 1,
          "value": "Active"
        }
      ],
      "chats": [
        {
          "id": 1,
          "value": "New"
        }
      ]
    },
    "filters": {
      "work_xps": [
        {
          "1_to_3_years": "1 - 3 years"
        }
      ],
      "educations": [
        {
          "diploma": "Diploma"
        }
      ],
      "salary_range_filters": [
        {
          "10K_to_30K": "10K - 30K"
        }
      ],
      "company_sizes": [
        {
          "0_to_50": "0 - 50"
        }
      ]
    },
    "settings": {
      "credit_limits": {
        "chat": {
          "limit": 5,
          "per": "day"
        },
        "job": {
          "limit": 1,
          "per": "month"
        }
      }
    },
    "updated_at": "2021-08-31T04:24:29.610642Z",
    "block_users": [
      111
    ]
  },
  "status_code": 200
} 
*/

  String? message;
  ConfigDataData? data;
  int? statusCode;

  ConfigData({
    this.message,
    this.data,
    this.statusCode,
  });
  ConfigData.fromJson(Map<String, dynamic> json) {
    message = json["message"]?.toString();
    data =
        (json["data"] != null) ? ConfigDataData.fromJson(json["data"]) : null;
    statusCode = json["status_code"]?.toInt();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["message"] = message;
    if (data != null) {
      data["data"] = this.data!.toJson();
    }
    data["status_code"] = statusCode;
    return data;
  }
}
