import { green, red } from "colors";
import { parse } from "dotenv";
import { existsSync, mkdirSync, readFileSync, writeFile } from 'fs';

const errorAndExit = (msg: string) => {
  console.log(red(msg));
  process.exit(1);
}

const ensureEnvField = (fieldName: string) => {
  if (!(fieldName in localEnv))
    errorAndExit(`${fieldName} missing in .env`);
}

console.log("Generating dev environment.ts file");

let localEnvPath = __dirname + "/../.env";
let localEnv: any = {};
if (!existsSync(localEnvPath))
  errorAndExit("Not .env file found to generate environment.ts. Please create a .env file in /environment");

localEnv = parse(readFileSync(localEnvPath));

// Ensure all mandatory data is there
ensureEnvField("DEPLOYMENT_MODE");

ensureEnvField("NODEJS_PORT");
ensureEnvField("NODEJS_ROOT_URL");

ensureEnvField("ADMIN_NODEJS_PORT");
ensureEnvField("ADMIN_NODEJS_ROOT_URL");

ensureEnvField("FRONTEND_ROOT_URL");

ensureEnvField("MAIN_SQL_DATABASE");
ensureEnvField("MAIN_SQL_USER");
ensureEnvField("MAIN_SQL_PASSWORD");

ensureEnvField("LEGACY_SQL_DATABASE");
ensureEnvField("LEGACY_SQL_USER");
ensureEnvField("LEGACY_SQL_PASSWORD");

ensureEnvField("TWITTER_APP_KEY");
ensureEnvField("TWITTER_APP_SECRET");
ensureEnvField("TWITTER_SOCKS_PROXY");

ensureEnvField("DISCORD_OAUTH_CLIENT_ID");
ensureEnvField("DISCORD_OAUTH_CLIENT_SECRET");

ensureEnvField("SMTP_SERVER_HOST");
ensureEnvField("SMTP_SERVER_PORT");

ensureEnvField("AIRDROP_OPERATOR_EVM_ADDRESS");

const envContent = {
  mode: localEnv.DEPLOYMENT_MODE,
  nodeJS: {
    rootUrl: localEnv.NODEJS_ROOT_URL,
    port: parseInt(localEnv.NODEJS_PORT),
    adminRootUrl: localEnv.ADMIN_NODEJS_ROOT_URL,
    adminPort: parseInt(localEnv.ADMIN_NODEJS_PORT),
  },
  smtp: {
    host: localEnv.SMTP_SERVER_HOST,
    port: parseInt(localEnv.SMTP_SERVER_PORT)
  },
  frontEnd: {
    rootUrl: localEnv.FRONTEND_ROOT_URL,
  },
  mainDatabase: {
    name: localEnv.MAIN_SQL_DATABASE,
    user: localEnv.MAIN_SQL_USER,
    password: localEnv.MAIN_SQL_PASSWORD
  },
  legacyDatabase: {
    name: localEnv.LEGACY_SQL_DATABASE,
    user: localEnv.LEGACY_SQL_USER,
    password: localEnv.LEGACY_SQL_PASSWORD
  },
  twitter: {
    appKey: localEnv.TWITTER_APP_KEY || "",
    appSecret: localEnv.TWITTER_APP_SECRET || "",
    socksProxy: localEnv.TWITTER_SOCKS_PROXY || "",
  },
  discord: {
    clientId: localEnv.DISCORD_OAUTH_CLIENT_ID || "",
    clientSecret: localEnv.DISCORD_OAUTH_CLIENT_SECRET || "",
  },
  wallets: {
    airdropsOperatorAddress: localEnv.AIRDROP_OPERATOR_EVM_ADDRESS
  }
}

const environmentFile = `
// DO NOT EDIT - GENERATED BY set_env.ts
export const environment = ${JSON.stringify(envContent, null, 2)};
`;

console.log();
console.log("Service is going to run with the following configuration:");
console.log(envContent);

const envDirPath = "./src/generated";
if (!existsSync(envDirPath))
  mkdirSync(envDirPath);

const envFilePath = `${envDirPath}/environment.ts`;
writeFile(envFilePath, environmentFile, (err) => {
  if (err) {
    throw console.error(err);
  } else {
    console.log();
    console.log(green(`${envFilePath}`) + ` file generated`);
    console.log();
  }
});