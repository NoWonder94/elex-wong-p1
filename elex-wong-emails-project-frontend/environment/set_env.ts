import { green, red } from "colors";
import { parse } from "dotenv";
import { existsSync, mkdirSync, readFileSync, writeFile } from 'fs';
import { dirname } from "path";

const errorAndExit = (msg: string) => {
  console.log(red(msg));
  process.exit(1);
}

const ensureEnvField = (fieldName: string) => {
  if (!(fieldName in localEnv))
    errorAndExit(`${fieldName} missing in .env`);
}

console.log("Generating dev environment.ts file");

let localEnvPath = __dirname + "/.env";
let localEnv: any = {};
if (!existsSync(localEnvPath))
  errorAndExit("Not .env file found to generate environment.ts. Please create a .env file in /environment");

localEnv = parse(readFileSync(localEnvPath));

// Ensure all mandatory data is there
ensureEnvField("DEPLOYMENT_MODE");
ensureEnvField("API_URL");
ensureEnvField("ADMIN_API_URL");

const envContent = {
  mode: localEnv.DEPLOYMENT_MODE,
  api: {
    url: localEnv.API_URL,
    adminUrl: localEnv.ADMIN_API_URL
  },
}

const environmentFile = `
// DO NOT EDIT - GENERATED BY set_env.ts
export const environment = ${JSON.stringify(envContent, null, 2)};
`;

console.log();
console.log("Service is going to run with the following configuration:");
console.log(envContent);

let envFilePath = './src/environments/environment.ts';
mkdirSync(dirname(envFilePath), { recursive: true });
writeFile(envFilePath, environmentFile, (err) => {
  if (err) {
    throw console.error(err);
  } else {
    console.log();
    console.log(green(`${envFilePath}`) + ` file generated`);
    console.log();
  }
});